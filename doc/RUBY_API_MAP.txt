
Ruby 1.8.4 (do header)
530 funções

Execução
	Inicialização
		void ruby_init (void);
		void ruby_prog_init (void);
	Loop padrão do interpretador
		void ruby_run (void) __attribute__ ((noreturn));
	Executar uma string
		VALUE rb_eval_string (const char*);
		VALUE rb_eval_string_protect (const char*, int*);
		VALUE rb_eval_string_wrap (const char*, int*);
	Pré-compilar código
		void rb_load_file (const char*);
		void ruby_script (const char*);
	Finalização
		VALUE rb_f_exit (int,VALUE*);
		VALUE rb_f_abort (int,VALUE*);
		VALUE rb_f_kill (int, VALUE*);
	Threads
		Inicialização
			VALUE rb_thread_create (VALUE (*)(), void*);
			VALUE rb_thread_main (void);
			VALUE rb_thread_run (VALUE);
		Finalização
			VALUE rb_thread_kill (VALUE);
			VALUE rb_thread_stop (void);
			void rb_thread_signal_exit (void);
		Misc.
			void rb_thread_start_timer (void);
			void rb_thread_stop_timer (void);
			void rb_thread_schedule (void);
			void rb_thread_wait_fd (int);
			int rb_thread_fd_writable (int);
			void rb_thread_fd_close (int);
			int rb_thread_alone (void);
			void rb_thread_polling (void);
			void rb_thread_sleep (int);
			void rb_thread_sleep_forever (void);
			VALUE rb_thread_wakeup (VALUE);
			void rb_thread_interrupt (void);
			void rb_thread_trap_eval (VALUE, int, int);
			void rb_thread_signal_raise (char*);
			int rb_thread_select (int, fd_set *, fd_set *, fd_set *, struct timeval *);
			void rb_thread_wait_for (struct timeval);
			VALUE rb_thread_current (void);
			VALUE rb_thread_local_aref (VALUE, ID);
			VALUE rb_thread_local_aset (VALUE, ID, VALUE);
			void rb_thread_atfork (void);
	Sistema
		void ruby_process_options (int, char**);
		void ruby_set_argv (int, char**);
		void ruby_init_loadpath (void);
		void ruby_show_version (void);
		void ruby_show_copyright (void);
		void ruby_incpush (const char*);
Importar módulos
	VALUE rb_require (const char*);
Coleta de lixo
	Marcação
		void rb_gc_mark_locations (VALUE*, VALUE*);		[marca uma seqüência de endereços]
		void rb_gc_mark_maybe (VALUE);				[marca um valor se ele aponta para a heap]
		void rb_gc_mark (VALUE);				[chamada para marcar objetos durante a função de marcação de objetos C]
	Controle do coletor
		VALUE rb_gc_enable (void);				[habilita o coletor == GC.enable]
		VALUE rb_gc_disable (void);				[desativa o coletor == GC.disable]
		VALUE rb_gc_start (void);				[realiza uma coleta de lixo (a não ser que o coletor tenha sido desativado) == GC.start]
		void rb_gc (void);					[realiza uma coleta de lixo (a não ser que o coletor tenha sido desativado)]
	Validade de referências
		void rb_gc_force_recycle (VALUE);			[invalida o objeto: coloca um objeto na lista de objetos a serem reciclados pelo coletor]
		void rb_gc_register_address (VALUE*);			[impede que o VALUE seja coletado]
		void rb_gc_unregister_address (VALUE*);			[permite que um VALUE anteriormente registrado seja coletado]
	Finalizadores
		void rb_gc_copy_finalizer (VALUE,VALUE);		[associa o finalizador de um objeto a outro]
	Uso interno
		%%% void rb_gc_mark_threads (void);			[marca os objetos Thread]
		%%% void rb_gc_mark_global_tbl (void);			[marca as variáveis globais]
		%%% void rb_gc_mark_parser (void);			[marca dados durante o parsing]
		%%% void rb_gc_mark_trap_list (void);			[marca os signal handlers]
		%%% void rb_mark_tbl (struct st_table*);		[marca todos os endereços de uma tabela]
		%%% void rb_mark_hash (struct st_table*);		[marca todos os endereços de uma hash (chave e valor)]
		%%% void rb_gc_finalize_deferred (void);		[finaliza objetos marcados como 'deferred' durante a fase de sweep]
		%%% void rb_gc_call_finalizer_at_exit (void);		[chama os finalizadores no término do programa]
Tratamento de exceções
	Tratar exceções
		VALUE rb_rescue (VALUE(*)(),VALUE,VALUE(*)(),VALUE);
		VALUE rb_rescue2 (VALUE(*)(),VALUE,VALUE(*)(),VALUE,...);
		VALUE rb_ensure (VALUE(*)(),VALUE,VALUE(*)(),VALUE);
		VALUE rb_catch (const char*,VALUE(*)(),VALUE);
	Sinalizar exceções
		VALUE rb_exc_new (VALUE, const char*, long);
		VALUE rb_exc_new2 (VALUE, const char*);
		VALUE rb_exc_new3 (VALUE, VALUE);
		void rb_throw (const char*,VALUE) __attribute__ ((noreturn));
		void rb_raise (VALUE, const char*, ...) __attribute__ ((noreturn));
		void rb_fatal (const char*, ...) __attribute__ ((noreturn));
		void rb_bug (const char*, ...) __attribute__ ((noreturn));
		void rb_sys_fail (const char*) __attribute__ ((noreturn));
		void rb_iter_break (void) __attribute__ ((noreturn));
		void rb_exit (int) __attribute__ ((noreturn));
		void rb_notimplement (void) __attribute__ ((noreturn));
		void rb_warning (const char*, ...);
		void rb_sys_warning (const char*, ...);
		void rb_warn (const char*, ...);
		void rb_loaderror (const char*, ...) __attribute__ ((noreturn));
		void rb_name_error (ID, const char*, ...) __attribute__ ((noreturn));
		void rb_invalid_str (const char*, const char*) __attribute__ ((noreturn));
		void rb_compile_error (const char*, ...);
		void rb_compile_error_append (const char*, ...);
		void rb_load_fail (const char*) __attribute__ ((noreturn));
		void rb_error_frozen (const char*) __attribute__ ((noreturn));
		void rb_exc_raise (VALUE) __attribute__ ((noreturn));
		void rb_exc_fatal (VALUE) __attribute__ ((noreturn));
Tipos de dados
	Chamada
		VALUE rb_funcall (VALUE, ID, int, ...);
		VALUE rb_funcall2 (VALUE, ID, int, const VALUE*);
		VALUE rb_funcall3 (VALUE, ID, int, const VALUE*);
		VALUE rb_apply (VALUE, ID, VALUE);
		VALUE rb_call_super (int, const VALUE*);
	Verificação de tipo
		void rb_check_type (VALUE,int);
	Criação de classes e objetos
		Via C
			VALUE rb_newobj (void);
			VALUE rb_data_object_alloc (VALUE,void*,RUBY_DATA_FUNC,RUBY_DATA_FUNC); [macro Data_Wrap_Struct]
			VALUE rb_define_class (const char*,VALUE);
			void rb_define_method (VALUE,const char*,VALUE(*)(),int);
			void rb_define_module_function (VALUE,const char*,VALUE(*)(),int);
			void rb_define_global_function (const char*,VALUE(*)(),int);
		Via Ruby
			VALUE rb_class_new_instance (int, VALUE*, VALUE);
			VALUE rb_define_module (const char*);
			VALUE rb_define_class_under (VALUE, const char*, VALUE);
			VALUE rb_define_module_under (VALUE, const char*);
			VALUE rb_ary_new (void);
			VALUE rb_ary_new2 (long);
			VALUE rb_ary_new3 (long,...);
			VALUE rb_ary_new4 (long, const VALUE *);
			VALUE rb_hash_new (void);
			VALUE rb_struct_new (VALUE, ...);
			VALUE rb_assoc_new (VALUE, VALUE);
			VALUE rb_class_new (VALUE);
			VALUE rb_module_new (void);
			VALUE rb_reg_new (const char*, long, int);
			VALUE rb_str_buf_new (long);
			VALUE rb_str_buf_new2 (const char*);
	Conversão de objetos
		C para Ruby
			VALUE rb_int2inum (long);
			VALUE rb_uint2inum (unsigned long);
			VALUE rb_ll2inum (long long);
			VALUE rb_ull2inum (unsigned long long);
			VALUE rb_uint2big (unsigned long);
			VALUE rb_int2big (long);
			VALUE rb_int2inum (long);
			VALUE rb_cstr_to_inum (const char*, int, int);
			VALUE rb_cstr2inum (const char*, int);
			VALUE rb_big2str (VALUE, int);
			VALUE rb_str_new (const char*, long);
			VALUE rb_str_new2 (const char*);
			VALUE rb_time_new (time_t, time_t);
			VALUE rb_float_new (double);
			ID rb_intern (const char*);
		Ruby para C
			char *rb_string_value_ptr (volatile VALUE*);
			@@~ char *rb_string_value_cstr (volatile VALUE*); [Verifica se a string contém \0]
			long rb_num2long (VALUE);
			unsigned long rb_num2ulong (VALUE);
			long long rb_num2ll (VALUE);
			unsigned long long rb_num2ull (VALUE);
			double rb_num2dbl (VALUE);
			@@~ char *rb_str2cstr (VALUE,long*);
			long rb_big2long (VALUE);
			double rb_str_to_dbl (VALUE, int);
			char *rb_id2name (ID);
			char *rb_class2name (VALUE);
			char *rb_obj_classname (VALUE);
		Em Ruby
			VALUE rb_str_to_str (VALUE);
			@@~ VALUE rb_string_value (volatile VALUE*); [Gera string vazia se não pôde converter]
			VALUE rb_str2inum (VALUE, int);
			VALUE rb_str_new3 (VALUE);
			VALUE rb_str_new4 (VALUE);
			VALUE rb_ary_to_ary (VALUE);
			VALUE rb_to_int (VALUE);
			VALUE rb_Integer (VALUE);
			VALUE rb_Float (VALUE);
			VALUE rb_String (VALUE);
			VALUE rb_Array (VALUE);
			VALUE rb_ary_to_s (VALUE);
			void rb_big_2comp (VALUE);
			VALUE rb_num2fix (VALUE);
			VALUE rb_fix2str (VALUE, int);
			ID rb_to_id (VALUE);
	Variáveis (atributos, globais, constantes)
		Consulta
			VALUE rb_ivar_defined (VALUE, ID);
			int rb_const_defined (VALUE, ID);
			int rb_const_defined_at (VALUE, ID);
			int rb_const_defined_from (VALUE, ID);
			VALUE rb_cvar_defined (VALUE, ID);
			VALUE rb_dvar_defined (ID);
		Get
			VALUE rb_iv_get (VALUE, const char*);
			VALUE rb_ivar_get (VALUE, ID);
			VALUE rb_gv_get (const char*);
			VALUE rb_attr_get (VALUE, ID); [variante de rb_ivar_get]
			VALUE rb_cv_get (VALUE, const char*);
			VALUE rb_cvar_get (VALUE, ID);
			VALUE rb_const_get (VALUE, ID);
			VALUE rb_const_get_at (VALUE, ID);
			VALUE rb_const_get_from (VALUE, ID);
		Set
			VALUE rb_iv_set (VALUE, const char*, VALUE);
			VALUE rb_ivar_set (VALUE, ID, VALUE);
			VALUE rb_gv_set (const char*, VALUE);
			void rb_cvar_set (VALUE, ID, VALUE, int);
			void rb_cv_set (VALUE, const char*, VALUE);
			void rb_const_set (VALUE, ID, VALUE);
	Strings
		Codificação
			Misc.
				void rb_set_kcode (const char*);
				const char* rb_get_kcode (void);
	Operações sobre números
		VALUE rb_big_plus (VALUE, VALUE);
		VALUE rb_big_minus (VALUE, VALUE);
		VALUE rb_big_mul (VALUE, VALUE);
		VALUE rb_big_divmod (VALUE, VALUE);
		VALUE rb_big_pow (VALUE, VALUE);
		VALUE rb_big_and (VALUE, VALUE);
		VALUE rb_big_or (VALUE, VALUE);
		VALUE rb_big_xor (VALUE, VALUE);
		VALUE rb_big_lshift (VALUE, VALUE);
		VALUE rb_big_rand (VALUE, double*);
	Arrays
		VALUE rb_ary_dup (VALUE);
		VALUE rb_ary_push (VALUE, VALUE);
		VALUE rb_ary_pop (VALUE);
		VALUE rb_ary_shift (VALUE);
		VALUE rb_ary_unshift (VALUE, VALUE);
		VALUE rb_ary_entry (VALUE, long);
		VALUE rb_ary_each (VALUE);
		VALUE rb_ary_join (VALUE, VALUE);
		VALUE rb_ary_print_on (VALUE, VALUE);
		VALUE rb_ary_reverse (VALUE);
		VALUE rb_ary_sort (VALUE);
		VALUE rb_ary_sort_bang (VALUE);
		VALUE rb_ary_delete (VALUE, VALUE);
		VALUE rb_ary_delete_at (VALUE, long);
		VALUE rb_ary_clear (VALUE);
		VALUE rb_ary_plus (VALUE, VALUE);
		VALUE rb_ary_concat (VALUE, VALUE);
		VALUE rb_ary_assoc (VALUE, VALUE);
		VALUE rb_ary_rassoc (VALUE, VALUE);
		VALUE rb_ary_includes (VALUE, VALUE);
		VALUE rb_ary_cmp (VALUE, VALUE);
	Structs
		VALUE rb_struct_define (const char*, ...);
		VALUE rb_struct_alloc (VALUE, VALUE);
		VALUE rb_struct_aref (VALUE, VALUE);
		VALUE rb_struct_aset (VALUE, VALUE, VALUE);
		VALUE rb_struct_getmember (VALUE, ID);
		VALUE rb_struct_iv_get (VALUE, char*);
		VALUE rb_struct_s_members (VALUE);
		VALUE rb_struct_members (VALUE);
	Expressões regulares
		VALUE rb_reg_nth_defined (int, VALUE);
		VALUE rb_reg_nth_match (int, VALUE);
		VALUE rb_reg_last_match (VALUE);
		VALUE rb_reg_match_pre (VALUE);
		VALUE rb_reg_match_post (VALUE);
		VALUE rb_reg_match_last (VALUE);
		VALUE rb_reg_match (VALUE, VALUE);
		VALUE rb_reg_match2 (VALUE);
		int rb_reg_options (VALUE);
	Diretórios
		void rb_glob (const char*,void(*)(const char*,VALUE),VALUE);
		void rb_globi (const char*,void(*)(const char*,VALUE),VALUE);
	Módulos
		void rb_include_module (VALUE,VALUE);
Segurança
	void rb_check_safe_obj (VALUE);
	@@~ void rb_check_safe_str (VALUE);
	void rb_secure (int);
	void rb_set_safe_level (int);
	void rb_secure_update (VALUE);
	void rb_obj_infect (VALUE,VALUE);
Camada de portabilidade
	Alocação de memória
		void *ruby_xmalloc (long);
		void *ruby_xcalloc (long,long);
		void *ruby_xrealloc (void*,long);
		void ruby_xfree (void*);

void rb_extend_object (VALUE,VALUE);
void rb_define_variable (const char*,VALUE*);
void rb_define_virtual_variable (const char*,VALUE(*)(),void(*)());
void rb_define_hooked_variable (const char*,VALUE*,VALUE(*)(),void(*)());
void rb_define_readonly_variable (const char*,VALUE*);
void rb_define_const (VALUE,const char*,VALUE);
void rb_define_global_const (const char*,VALUE);
void rb_undef_method (VALUE,const char*);
void rb_define_alias (VALUE,const char*,const char*);
void rb_define_attr (VALUE,const char*,int,int);
void rb_global_variable (VALUE*);
void rb_p (VALUE);
int rb_scan_args (int, const VALUE*, const char*, ...);
VALUE rb_equal (VALUE,VALUE);
VALUE rb_each (VALUE);
VALUE rb_yield (VALUE);
VALUE rb_yield_values (int n, ...);
VALUE rb_yield_splat (VALUE);
int rb_block_given_p (void);
void rb_need_block (void);
VALUE rb_iterate (VALUE(*)(VALUE),VALUE,VALUE(*)(),VALUE);
void ruby_options (int, char**);
static inline VALUE rb_class_of(VALUE obj);
static inline int rb_type(VALUE obj);
static inline int rb_special_const_p(VALUE obj);
void rb_mem_clear (register VALUE*, register long);
VALUE rb_check_array_type (VALUE);
VALUE rb_ary_freeze (VALUE);
VALUE rb_ary_aref (int, VALUE*, VALUE);
void rb_ary_store (VALUE, long, VALUE);
VALUE rb_protect_inspect (VALUE(*)(),VALUE,VALUE);
VALUE rb_inspecting_p (VALUE);
VALUE rb_check_array_value (VALUE);
VALUE rb_values_at (VALUE, long, int, VALUE*, VALUE(*) (VALUE,long));
VALUE rb_big_clone (VALUE);
VALUE rb_big_norm (VALUE);
VALUE rb_str_to_inum (VALUE, int, int);
unsigned long rb_big2ulong (VALUE);
VALUE rb_ll2inum (long long);
VALUE rb_ull2inum (unsigned long long);
long long rb_big2ll (VALUE);
unsigned long long rb_big2ull (VALUE);
void rb_quad_pack (char*,VALUE);
VALUE rb_quad_unpack (const char*,int);
VALUE rb_dbl2big (double);
double rb_big2dbl (VALUE);
VALUE rb_class_boot (VALUE);
VALUE rb_mod_init_copy (VALUE, VALUE);
VALUE rb_class_init_copy (VALUE, VALUE);
VALUE rb_singleton_class_clone (VALUE);
void rb_singleton_class_attached (VALUE,VALUE);
VALUE rb_make_metaclass (VALUE, VALUE);
void rb_check_inheritable (VALUE);
VALUE rb_class_inherited (VALUE, VALUE);
VALUE rb_define_class_id (ID, VALUE);
VALUE rb_define_module_id (ID);
VALUE rb_mod_included_modules (VALUE);
VALUE rb_mod_include_p (VALUE, VALUE);
VALUE rb_mod_ancestors (VALUE);
VALUE rb_class_instance_methods (int, VALUE*, VALUE);
VALUE rb_class_public_instance_methods (int, VALUE*, VALUE);
VALUE rb_class_protected_instance_methods (int, VALUE*, VALUE);
VALUE rb_class_private_instance_methods (int, VALUE*, VALUE);
VALUE rb_obj_singleton_methods (int, VALUE*, VALUE);
void rb_define_method_id (VALUE, ID, VALUE (*)(), int);
void rb_frozen_class_p (VALUE);
void rb_undef (VALUE, ID);
void rb_define_protected_method (VALUE, const char*, VALUE (*)(), int);
void rb_define_private_method (VALUE, const char*, VALUE (*)(), int);
void rb_define_singleton_method (VALUE, const char*, VALUE(*)(), int);
VALUE rb_singleton_class (VALUE);
int rb_cmpint (VALUE, VALUE, VALUE);
void rb_cmperr (VALUE, VALUE) __attribute__ ((noreturn));
void rb_check_frozen (VALUE);
void ruby_set_current_source (void);
void rb_remove_method (VALUE, const char*);
void rb_define_alloc_func (VALUE, VALUE (*)(VALUE));
void rb_undef_alloc_func (VALUE);
void rb_clear_cache (void);
void rb_clear_cache_by_class (VALUE);
void rb_alias (VALUE, ID, ID);
void rb_attr (VALUE,ID,int,int,int);
int rb_method_boundp (VALUE, ID, int);
VALUE rb_dvar_curr (ID);
VALUE rb_dvar_ref (ID);
void rb_dvar_asgn (ID, VALUE);
void rb_dvar_push (ID, VALUE);
VALUE *rb_svar (int);
VALUE rb_eval_cmd (VALUE, VALUE, int);
int rb_obj_respond_to (VALUE, ID, int);
int rb_respond_to (VALUE, ID);
void rb_interrupt (void);
void rb_backtrace (void);
ID rb_frame_last_func (void);
VALUE rb_obj_instance_eval (int, VALUE*, VALUE);
VALUE rb_mod_module_eval (int, VALUE*, VALUE);
void rb_load (VALUE, int);
void rb_load_protect (VALUE, int, int*);
void rb_jump_tag (int) __attribute__ ((noreturn));
int rb_provided (const char*);
void rb_provide (const char*);
VALUE rb_f_require (VALUE, VALUE);
VALUE rb_require_safe (VALUE, int);
void rb_obj_call_init (VALUE, int, VALUE*);
VALUE rb_block_proc (void);
VALUE rb_f_lambda (void);
VALUE rb_proc_new (VALUE (*)( ), VALUE);
VALUE rb_protect (VALUE (*)(VALUE), VALUE, int*);
void rb_set_end_proc (void (*)(VALUE), VALUE);
void rb_mark_end_proc (void);
void rb_exec_end_proc (void);
void ruby_finalize (void);
void ruby_stop (int) __attribute__ ((noreturn));
int ruby_cleanup (int);
int ruby_exec (void);
VALUE rb_funcall_rescue (VALUE, ID, int, ...);
int eaccess (const char*, int);
VALUE rb_file_s_expand_path (int, VALUE *);
VALUE rb_file_expand_path (VALUE, VALUE);
void rb_file_const (const char*, VALUE);
int rb_find_file_ext (VALUE*, const char* const*);
VALUE rb_find_file (VALUE);
char *rb_path_next (const char *);
char *rb_path_skip_prefix (const char *);
char *rb_path_last_separator (const char *);
char *rb_path_end (const char *);
void rb_memerror (void) __attribute__ ((noreturn));
int ruby_stack_check (void);
int ruby_stack_length (VALUE**);
char *rb_source_filename (const char*);
void st_foreach_safe (struct st_table *, int (*)(), unsigned long);
void rb_hash_foreach (VALUE, int (*)(), VALUE);
VALUE rb_hash (VALUE);
VALUE rb_hash_freeze (VALUE);
VALUE rb_hash_aref (VALUE, VALUE);
VALUE rb_hash_aset (VALUE, VALUE, VALUE);
VALUE rb_hash_delete_if (VALUE);
VALUE rb_hash_delete (VALUE,VALUE);
int rb_path_check (char*);
int rb_env_path_tainted (void);
VALUE rb_io_write (VALUE, VALUE);
VALUE rb_io_gets (VALUE);
VALUE rb_io_getc (VALUE);
VALUE rb_io_ungetc (VALUE, VALUE);
VALUE rb_io_close (VALUE);
VALUE rb_io_eof (VALUE);
VALUE rb_io_binmode (VALUE);
VALUE rb_io_addstr (VALUE, VALUE);
VALUE rb_io_printf (int, VALUE*, VALUE);
VALUE rb_io_print (int, VALUE*, VALUE);
VALUE rb_io_puts (int, VALUE*, VALUE);
VALUE rb_file_open (const char*, const char*);
VALUE rb_gets (void);
void rb_write_error (const char*);
void rb_write_error2 (const char*, long);
VALUE rb_marshal_dump (VALUE, VALUE);
VALUE rb_marshal_load (VALUE);
void rb_num_zerodiv (void);
VALUE rb_num_coerce_bin (VALUE, VALUE);
VALUE rb_num_coerce_cmp (VALUE, VALUE);
VALUE rb_num_coerce_relop (VALUE, VALUE);
VALUE rb_dbl_cmp (double, double);
int rb_eql (VALUE, VALUE);
VALUE rb_any_to_s (VALUE);
VALUE rb_inspect (VALUE);
VALUE rb_obj_is_instance_of (VALUE, VALUE);
VALUE rb_obj_is_kind_of (VALUE, VALUE);
VALUE rb_obj_alloc (VALUE);
VALUE rb_obj_clone (VALUE);
VALUE rb_obj_dup (VALUE);
VALUE rb_obj_init_copy (VALUE,VALUE);
VALUE rb_obj_taint (VALUE);
VALUE rb_obj_tainted (VALUE);
VALUE rb_obj_untaint (VALUE);
VALUE rb_obj_freeze (VALUE);
VALUE rb_obj_id (VALUE);
VALUE rb_obj_class (VALUE);
VALUE rb_class_real (VALUE);
VALUE rb_class_inherited_p (VALUE, VALUE);
VALUE rb_convert_type (VALUE,int,const char*,const char*);
VALUE rb_check_convert_type (VALUE,int,const char*,const char*);
double rb_cstr_to_dbl (const char*, int);
int ruby_yyparse (void);
ID rb_id_attrset (ID);
void rb_parser_append_print (void);
void rb_parser_while_loop (int, int);
int ruby_parser_stack_on_heap (void);
int rb_is_const_id (ID);
int rb_is_instance_id (ID);
int rb_is_class_id (ID);
int rb_is_local_id (ID);
int rb_is_junk_id (ID);
int rb_symname_p (const char*);
VALUE rb_backref_get (void);
void rb_backref_set (VALUE);
VALUE rb_lastline_get (void);
void rb_lastline_set (VALUE);
VALUE rb_sym_all_symbols (void);
int rb_proc_exec (const char*);
VALUE rb_f_exec (int,VALUE*);
int rb_waitpid (int,int*,int);
void rb_syswait (int);
VALUE rb_proc_times (VALUE);
VALUE rb_detach_process (int);
VALUE rb_range_new (VALUE, VALUE, int);
VALUE rb_range_beg_len (VALUE, long*, long*, long, int);
VALUE rb_length_by_each (VALUE);
int rb_memcmp (char*,char*,long);
int rb_memcicmp (char*,char*,long);
long rb_memsearch (char*,long,char*,long);
void ruby_posix_signal (int, void (*)(int));
void rb_trap_exit (void);
void rb_trap_exec (void);
const char *ruby_signal_name (int);
VALUE rb_f_sprintf (int, VALUE*);
VALUE rb_str_new5 (VALUE, const char*, long);
VALUE rb_tainted_str_new (const char*, long);
VALUE rb_tainted_str_new2 (const char*);
VALUE rb_str_buf_append (VALUE, VALUE);
VALUE rb_str_buf_cat (VALUE, const char*, long);
VALUE rb_str_buf_cat2 (VALUE, const char*);
VALUE rb_obj_as_string (VALUE);
VALUE rb_check_string_type (VALUE);
VALUE rb_str_dup (VALUE);
VALUE rb_str_locktmp (VALUE);
VALUE rb_str_unlocktmp (VALUE);
VALUE rb_str_dup_frozen (VALUE);
VALUE rb_str_plus (VALUE, VALUE);
VALUE rb_str_times (VALUE, VALUE);
VALUE rb_str_substr (VALUE, long, long);
void rb_str_modify (VALUE);
VALUE rb_str_freeze (VALUE);
VALUE rb_str_resize (VALUE, long);
VALUE rb_str_cat (VALUE, const char*, long);
VALUE rb_str_cat2 (VALUE, const char*);
VALUE rb_str_append (VALUE, VALUE);
VALUE rb_str_concat (VALUE, VALUE);
int rb_str_hash (VALUE);
int rb_str_cmp (VALUE, VALUE);
VALUE rb_str_upto (VALUE, VALUE, int);
void rb_str_update (VALUE, long, long, VALUE);
VALUE rb_str_inspect (VALUE);
VALUE rb_str_dump (VALUE);
VALUE rb_str_split (VALUE, const char*);
void rb_str_associate (VALUE, VALUE);
VALUE rb_str_associated (VALUE);
void rb_str_setter (VALUE, ID, VALUE*);
VALUE rb_str_intern (VALUE);
VALUE rb_mod_name (VALUE);
VALUE rb_class_path (VALUE);
void rb_set_class_path (VALUE, VALUE, const char*);
VALUE rb_path2class (const char*);
void rb_name_class (VALUE, ID);
VALUE rb_class_name (VALUE);
void rb_autoload (VALUE, ID, const char*);
VALUE rb_autoload_load (VALUE, ID);
VALUE rb_autoload_p (VALUE, ID);
VALUE rb_f_trace_var (int, VALUE*);
VALUE rb_f_untrace_var (int, VALUE*);
VALUE rb_f_global_variables (void);
void rb_alias_variable (ID, ID);
struct st_table* rb_generic_ivar_table (VALUE);
void rb_copy_generic_ivar (VALUE,VALUE);
void rb_mark_generic_ivar (VALUE);
void rb_mark_generic_ivar_tbl (void);
void rb_free_generic_ivar (VALUE);
VALUE rb_obj_instance_variables (VALUE);
VALUE rb_obj_remove_instance_variable (VALUE, VALUE);
void *rb_mod_const_at (VALUE, void*);
void *rb_mod_const_of (VALUE, void*);
VALUE rb_const_list (void*);
VALUE rb_mod_constants (VALUE);
VALUE rb_mod_remove_const (VALUE, VALUE);
VALUE rb_mod_constants (VALUE);
VALUE rb_mod_const_missing (VALUE,VALUE);
void rb_define_class_variable (VALUE, const char*, VALUE);
VALUE rb_mod_class_variables (VALUE);
VALUE rb_mod_remove_cvar (VALUE, VALUE);
