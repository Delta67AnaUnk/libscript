void * PyMem_Malloc(size_t);
void * PyMem_Realloc(void *, size_t);
void PyMem_Free(void *);
int PyType_IsSubtype(PyTypeObject *, PyTypeObject *);
int PyType_Ready(PyTypeObject *);
PyObject * PyType_GenericAlloc(PyTypeObject *, int);
PyObject * PyType_GenericNew(PyTypeObject *, PyObject *, PyObject *);
PyObject * _PyType_Lookup(PyTypeObject *, PyObject *);
int PyObject_Print(PyObject *, FILE *, int);
void _PyObject_Dump(PyObject *);
PyObject * PyObject_Repr(PyObject *);
PyObject * PyObject_Str(PyObject *);
PyObject * PyObject_Unicode(PyObject *);
int PyObject_Compare(PyObject *, PyObject *);
PyObject * PyObject_RichCompare(PyObject *, PyObject *, int);
int PyObject_RichCompareBool(PyObject *, PyObject *, int);
PyObject * PyObject_GetAttrString(PyObject *, char *);
int PyObject_SetAttrString(PyObject *, char *, PyObject *);
int PyObject_HasAttrString(PyObject *, char *);
PyObject * PyObject_GetAttr(PyObject *, PyObject *);
int PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
int PyObject_HasAttr(PyObject *, PyObject *);
PyObject ** _PyObject_GetDictPtr(PyObject *);
PyObject * PyObject_SelfIter(PyObject *);
PyObject * PyObject_GenericGetAttr(PyObject *, PyObject *);
int PyObject_GenericSetAttr(PyObject *, PyObject *, PyObject *);
long PyObject_Hash(PyObject *);
int PyObject_IsTrue(PyObject *);
int PyObject_Not(PyObject *);
int PyCallable_Check(PyObject *);
int PyNumber_Coerce(PyObject **, PyObject **);
int PyNumber_CoerceEx(PyObject **, PyObject **);
void PyObject_ClearWeakRefs(PyObject *);
PyObject * PyObject_Dir(PyObject *);
int Py_ReprEnter(PyObject *);
void Py_ReprLeave(PyObject *);
long _Py_HashDouble(double);
long _Py_HashPointer(void*);
void Py_IncRef(PyObject *);
void Py_DecRef(PyObject *);
void _PyTrash_deposit_object(PyObject*);
void _PyTrash_destroy_chain(void);
void * PyObject_Malloc(size_t);
void * PyObject_Realloc(void *, size_t);
void PyObject_Free(void *);
PyObject * PyObject_Init(PyObject *, PyTypeObject *);
PyVarObject * PyObject_InitVar(PyVarObject *, PyTypeObject *, int);
PyObject * _PyObject_New(PyTypeObject *);
PyVarObject * _PyObject_NewVar(PyTypeObject *, int);
long PyGC_Collect(void);
PyVarObject * _PyObject_GC_Resize(PyVarObject *, int);
PyObject * _PyObject_GC_Malloc(size_t);
PyObject * _PyObject_GC_New(PyTypeObject *);
PyVarObject * _PyObject_GC_NewVar(PyTypeObject *, int);
void PyObject_GC_Track(void *);
void PyObject_GC_UnTrack(void *);
void PyObject_GC_Del(void *);
void Py_FatalError(const char *message);
PyObject* PyUnicodeUCS2_FromUnicode(const Py_UNICODE *u, int size);
Py_UNICODE * PyUnicodeUCS2_AsUnicode(PyObject *unicode);
int PyUnicodeUCS2_GetSize(PyObject *unicode);
Py_UNICODE PyUnicodeUCS2_GetMax(void);
int PyUnicodeUCS2_Resize(PyObject **unicode, int length);
PyObject* PyUnicodeUCS2_FromEncodedObject(register PyObject *obj, const char *encoding, const char *errors);
PyObject* PyUnicodeUCS2_FromObject(register PyObject *obj);
PyObject* PyUnicodeUCS2_FromWideChar(register const wchar_t *w, int size);
int PyUnicodeUCS2_AsWideChar(PyUnicodeObject *unicode, register wchar_t *w, int size);
PyObject* PyUnicodeUCS2_FromOrdinal(int ordinal);
PyObject * _PyUnicodeUCS2_AsDefaultEncodedString(PyObject *, const char *);
const char* PyUnicodeUCS2_GetDefaultEncoding(void);
int PyUnicodeUCS2_SetDefaultEncoding(const char *encoding);
PyObject* PyUnicodeUCS2_Decode(const char *s, int size, const char *encoding, const char *errors);
PyObject* PyUnicodeUCS2_Encode(const Py_UNICODE *s, int size, const char *encoding, const char *errors);
PyObject* PyUnicodeUCS2_AsEncodedObject(PyObject *unicode, const char *encoding, const char *errors);
PyObject* PyUnicodeUCS2_AsEncodedString(PyObject *unicode, const char *encoding, const char *errors);
PyObject* PyUnicode_DecodeUTF7(const char *string, int length, const char *errors);
PyObject* PyUnicode_EncodeUTF7(const Py_UNICODE *data, int length, int encodeSetO, int encodeWhiteSpace, const char *errors);
PyObject* PyUnicodeUCS2_DecodeUTF8(const char *string, int length, const char *errors);
PyObject* PyUnicodeUCS2_DecodeUTF8Stateful(const char *string, int length, const char *errors, int *consumed);
PyObject* PyUnicodeUCS2_AsUTF8String(PyObject *unicode);
PyObject* PyUnicodeUCS2_EncodeUTF8(const Py_UNICODE *data, int length, const char *errors);
PyObject* PyUnicodeUCS2_DecodeUTF16(const char *string, int length, const char *errors, int *byteorder);
PyObject* PyUnicodeUCS2_DecodeUTF16Stateful(const char *string, int length, const char *errors, int *byteorder, int *consumed);
PyObject* PyUnicodeUCS2_AsUTF16String(PyObject *unicode);
PyObject* PyUnicodeUCS2_EncodeUTF16(const Py_UNICODE *data, int length, const char *errors, int byteorder);
PyObject* PyUnicodeUCS2_DecodeUnicodeEscape(const char *string, int length,const char *errors );
PyObject* PyUnicodeUCS2_AsUnicodeEscapeString(PyObject *unicode);
PyObject* PyUnicodeUCS2_EncodeUnicodeEscape(const Py_UNICODE *data, int length);
PyObject* PyUnicodeUCS2_DecodeRawUnicodeEscape(const char *string, int length, const char *errors);
PyObject* PyUnicodeUCS2_AsRawUnicodeEscapeString(PyObject *unicode);
PyObject* PyUnicodeUCS2_EncodeRawUnicodeEscape(const Py_UNICODE *data, int length);
PyObject* PyUnicodeUCS2_DecodeLatin1(const char *string, int length, const char *errors);
PyObject* PyUnicodeUCS2_AsLatin1String(PyObject *unicode);
PyObject* PyUnicodeUCS2_EncodeLatin1(const Py_UNICODE *data, int length, const char *errors);
PyObject* PyUnicodeUCS2_DecodeASCII(const char *string, int length, const char *errors);
PyObject* PyUnicodeUCS2_AsASCIIString(PyObject *unicode);
PyObject* PyUnicodeUCS2_EncodeASCII(const Py_UNICODE *data, int length, const char *errors);
PyObject* PyUnicodeUCS2_DecodeCharmap(const char *string, int length, PyObject *mapping, const char *errors);
PyObject* PyUnicodeUCS2_AsCharmapString(PyObject *unicode, PyObject *mapping);
PyObject* PyUnicodeUCS2_EncodeCharmap(const Py_UNICODE *data, int length, PyObject *mapping, const char *errors);
PyObject * PyUnicodeUCS2_TranslateCharmap(const Py_UNICODE *data, int length, PyObject *table, const char *errors);
int PyUnicodeUCS2_EncodeDecimal(Py_UNICODE *s, int length, char *output, const char *errors);
PyObject* PyUnicodeUCS2_Concat(PyObject *left, PyObject *right);
PyObject* PyUnicodeUCS2_Split(PyObject *s, PyObject *sep, int maxsplit);
PyObject* PyUnicodeUCS2_Splitlines(PyObject *s, int keepends);
PyObject* PyUnicodeUCS2_RSplit(PyObject *s, PyObject *sep, int maxsplit);
PyObject * PyUnicodeUCS2_Translate(PyObject *str, PyObject *table, const char *errors);
PyObject* PyUnicodeUCS2_Join(PyObject *separator, PyObject *seq);
int PyUnicodeUCS2_Tailmatch(PyObject *str, PyObject *substr, int start, int end, int direction);
int PyUnicodeUCS2_Find(PyObject *str, PyObject *substr, int start, int end, int direction);
int PyUnicodeUCS2_Count(PyObject *str, PyObject *substr, int start, int end);
PyObject * PyUnicodeUCS2_Replace(PyObject *str, PyObject *substr, PyObject *replstr, int maxcount);
int PyUnicodeUCS2_Compare(PyObject *left, PyObject *right);
PyObject * PyUnicodeUCS2_Format(PyObject *format, PyObject *args);
int PyUnicodeUCS2_Contains( PyObject *container,PyObject *element );
PyObject * _PyUnicode_XStrip( PyUnicodeObject *self, int striptype, PyObject *sepobj );
int _PyUnicodeUCS2_IsLowercase( Py_UNICODE ch );
int _PyUnicodeUCS2_IsUppercase( Py_UNICODE ch );
int _PyUnicodeUCS2_IsTitlecase( Py_UNICODE ch );
int _PyUnicodeUCS2_IsWhitespace( Py_UNICODE ch );
int _PyUnicodeUCS2_IsLinebreak( Py_UNICODE ch );
Py_UNICODE _PyUnicodeUCS2_ToLowercase( Py_UNICODE ch );
Py_UNICODE _PyUnicodeUCS2_ToUppercase( Py_UNICODE ch );
Py_UNICODE _PyUnicodeUCS2_ToTitlecase( Py_UNICODE ch );
int _PyUnicodeUCS2_ToDecimalDigit( Py_UNICODE ch );
int _PyUnicodeUCS2_ToDigit( Py_UNICODE ch );
double _PyUnicodeUCS2_ToNumeric( Py_UNICODE ch );
int _PyUnicodeUCS2_IsDecimalDigit( Py_UNICODE ch );
int _PyUnicodeUCS2_IsDigit( Py_UNICODE ch );
int _PyUnicodeUCS2_IsNumeric( Py_UNICODE ch );
int _PyUnicodeUCS2_IsAlpha( Py_UNICODE ch );
PyObject * PyInt_FromString(char*, char**, int);
PyObject * PyInt_FromUnicode(Py_UNICODE*, int, int);
PyObject * PyInt_FromLong(long);
long PyInt_AsLong(PyObject *);
unsigned long PyInt_AsUnsignedLongMask(PyObject *);
unsigned long long PyInt_AsUnsignedLongLongMask(PyObject *);
long PyInt_GetMax(void);
unsigned long PyOS_strtoul(char *, char **, int);
long PyOS_strtol(char *, char **, int);
PyObject * PyBool_FromLong(long);
PyObject * PyLong_FromLong(long);
PyObject * PyLong_FromUnsignedLong(unsigned long);
PyObject * PyLong_FromDouble(double);
long PyLong_AsLong(PyObject *);
unsigned long PyLong_AsUnsignedLong(PyObject *);
unsigned long PyLong_AsUnsignedLongMask(PyObject *);
double _PyLong_AsScaledDouble(PyObject *vv, int *e);
double PyLong_AsDouble(PyObject *);
PyObject * PyLong_FromVoidPtr(void *);
void * PyLong_AsVoidPtr(PyObject *);
PyObject * PyLong_FromLongLong(long long);
PyObject * PyLong_FromUnsignedLongLong(unsigned long long);
long long PyLong_AsLongLong(PyObject *);
unsigned long long PyLong_AsUnsignedLongLong(PyObject *);
unsigned long long PyLong_AsUnsignedLongLongMask(PyObject *);
PyObject * PyLong_FromString(char *, char **, int);
PyObject * PyLong_FromUnicode(Py_UNICODE*, int, int);
int _PyLong_Sign(PyObject *v);
size_t _PyLong_NumBits(PyObject *v);
PyObject * _PyLong_FromByteArray( const unsigned char* bytes, size_t n, int little_endian, int is_signed);
int _PyLong_AsByteArray(PyLongObject* v, unsigned char* bytes, size_t n, int little_endian, int is_signed);
PyObject * PyFloat_FromString(PyObject*, char** junk);
PyObject * PyFloat_FromDouble(double);
double PyFloat_AsDouble(PyObject *);
void PyFloat_AsReprString(char*, PyFloatObject *v);
void PyFloat_AsString(char*, PyFloatObject *v);
int _PyFloat_Pack4(double x, unsigned char *p, int le);
int _PyFloat_Pack8(double x, unsigned char *p, int le);
double _PyFloat_Unpack4(const unsigned char *p, int le);
double _PyFloat_Unpack8(const unsigned char *p, int le);
Py_complex _Py_c_sum(Py_complex, Py_complex);
Py_complex _Py_c_diff(Py_complex, Py_complex);
Py_complex _Py_c_neg(Py_complex);
Py_complex _Py_c_prod(Py_complex, Py_complex);
Py_complex _Py_c_quot(Py_complex, Py_complex);
Py_complex _Py_c_pow(Py_complex, Py_complex);
PyObject * PyComplex_FromCComplex(Py_complex);
PyObject * PyComplex_FromDoubles(double real, double imag);
double PyComplex_RealAsDouble(PyObject *op);
double PyComplex_ImagAsDouble(PyObject *op);
Py_complex PyComplex_AsCComplex(PyObject *op);
PyObject * PyRange_New(long, long, long, int);
PyObject * PyString_FromStringAndSize(const char *, int);
PyObject * PyString_FromString(const char *);
PyObject * PyString_FromFormatV(const char*, va_list) __attribute__((format(printf, 1, 0)));
PyObject * PyString_FromFormat(const char*, ...) __attribute__((format(printf, 1, 2)));
int PyString_Size(PyObject *);
char * PyString_AsString(PyObject *);
PyObject * PyString_Repr(PyObject *, int);
void PyString_Concat(PyObject **, PyObject *);
void PyString_ConcatAndDel(PyObject **, PyObject *);
int _PyString_Resize(PyObject **, int);
int _PyString_Eq(PyObject *, PyObject*);
PyObject * PyString_Format(PyObject *, PyObject *);
PyObject * _PyString_FormatLong(PyObject*, int, int, int, char**, int*);
PyObject * PyString_DecodeEscape(const char *, int, const char *, int, const char *);
void PyString_InternInPlace(PyObject **);
void PyString_InternImmortal(PyObject **);
PyObject * PyString_InternFromString(const char *);
void _Py_ReleaseInternedStrings(void);
PyObject * _PyString_Join(PyObject *sep, PyObject *x);
PyObject* PyString_Decode( const char *s, int size, const char *encoding, const char *errors );
PyObject* PyString_Encode( const char *s, int size, const char *encoding, const char *errors );
PyObject* PyString_AsEncodedObject( PyObject *str, const char *encoding, const char *errors );
PyObject* PyString_AsEncodedString( PyObject *str, const char *encoding, const char *errors );
PyObject* PyString_AsDecodedObject( PyObject *str, const char *encoding, const char *errors );
PyObject* PyString_AsDecodedString( PyObject *str, const char *encoding, const char *errors );
int PyString_AsStringAndSize( register PyObject *obj, register char **s, register int *len );
PyObject * PyBuffer_FromObject(PyObject *base, int offset, int size);
PyObject * PyBuffer_FromReadWriteObject(PyObject *base, int offset, int size);
PyObject * PyBuffer_FromMemory(void *ptr, int size);
PyObject * PyBuffer_FromReadWriteMemory(void *ptr, int size);
PyObject * PyBuffer_New(int size);
PyObject * PyTuple_New(int size);
int PyTuple_Size(PyObject *);
PyObject * PyTuple_GetItem(PyObject *, int);
int PyTuple_SetItem(PyObject *, int, PyObject *);
PyObject * PyTuple_GetSlice(PyObject *, int, int);
int _PyTuple_Resize(PyObject **, int);
PyObject * PyTuple_Pack(int, ...);
PyObject * PyList_New(int size);
int PyList_Size(PyObject *);
PyObject * PyList_GetItem(PyObject *, int);
int PyList_SetItem(PyObject *, int, PyObject *);
int PyList_Insert(PyObject *, int, PyObject *);
int PyList_Append(PyObject *, PyObject *);
PyObject * PyList_GetSlice(PyObject *, int, int);
int PyList_SetSlice(PyObject *, int, int, PyObject *);
int PyList_Sort(PyObject *);
int PyList_Reverse(PyObject *);
PyObject * PyList_AsTuple(PyObject *);
PyObject * _PyList_Extend(PyListObject *, PyObject *);
PyObject * PyDict_New(void);
PyObject * PyDict_GetItem(PyObject *mp, PyObject *key);
int PyDict_SetItem(PyObject *mp, PyObject *key, PyObject *item);
int PyDict_DelItem(PyObject *mp, PyObject *key);
void PyDict_Clear(PyObject *mp);
int PyDict_Next( PyObject *mp, int *pos, PyObject **key, PyObject **value);
PyObject * PyDict_Keys(PyObject *mp);
PyObject * PyDict_Values(PyObject *mp);
PyObject * PyDict_Items(PyObject *mp);
int PyDict_Size(PyObject *mp);
PyObject * PyDict_Copy(PyObject *mp);
int PyDict_Contains(PyObject *mp, PyObject *key);
int PyDict_Update(PyObject *mp, PyObject *other);
int PyDict_Merge(PyObject *mp, PyObject *other, int override);
int PyDict_MergeFromSeq2(PyObject *d, PyObject *seq2, int override);
PyObject * PyDict_GetItemString(PyObject *dp, const char *key);
int PyDict_SetItemString(PyObject *dp, const char *key, PyObject *item);
int PyDict_DelItemString(PyObject *dp, const char *key);
PyCFunction PyCFunction_GetFunction(PyObject *);
PyObject * PyCFunction_GetSelf(PyObject *);
int PyCFunction_GetFlags(PyObject *);
PyObject * PyCFunction_Call(PyObject *, PyObject *, PyObject *);
PyObject * Py_FindMethod(PyMethodDef[], PyObject *, char *);
PyObject * PyCFunction_NewEx(PyMethodDef *, PyObject *, PyObject *);
PyObject * Py_FindMethodInChain(PyMethodChain *, PyObject *, char *);
PyObject * PyModule_New(char *);
PyObject * PyModule_GetDict(PyObject *);
char * PyModule_GetName(PyObject *);
char * PyModule_GetFilename(PyObject *);
void _PyModule_Clear(PyObject *);
PyObject * PyFunction_New(PyObject *, PyObject *);
PyObject * PyFunction_GetCode(PyObject *);
PyObject * PyFunction_GetGlobals(PyObject *);
PyObject * PyFunction_GetModule(PyObject *);
PyObject * PyFunction_GetDefaults(PyObject *);
int PyFunction_SetDefaults(PyObject *, PyObject *);
PyObject * PyFunction_GetClosure(PyObject *);
int PyFunction_SetClosure(PyObject *, PyObject *);
PyObject * PyClassMethod_New(PyObject *);
PyObject * PyStaticMethod_New(PyObject *);
PyObject * PyClass_New(PyObject *, PyObject *, PyObject *);
PyObject * PyInstance_New(PyObject *, PyObject *, PyObject *);
PyObject * PyInstance_NewRaw(PyObject *, PyObject *);
PyObject * PyMethod_New(PyObject *, PyObject *, PyObject *);
PyObject * PyMethod_Function(PyObject *);
PyObject * PyMethod_Self(PyObject *);
PyObject * PyMethod_Class(PyObject *);
PyObject * _PyInstance_Lookup(PyObject *pinst, PyObject *name);
int PyClass_IsSubclass(PyObject *, PyObject *);
PyObject * PyFile_FromString(char *, char *);
void PyFile_SetBufSize(PyObject *, int);
int PyFile_SetEncoding(PyObject *, const char *);
PyObject * PyFile_FromFile(FILE *, char *, char *, int (*)(FILE *));
FILE * PyFile_AsFile(PyObject *);
PyObject * PyFile_Name(PyObject *);
PyObject * PyFile_GetLine(PyObject *, int);
int PyFile_WriteObject(PyObject *, PyObject *, int);
int PyFile_SoftSpace(PyObject *, int);
int PyFile_WriteString(const char *, PyObject *);
int PyObject_AsFileDescriptor(PyObject *);
char *Py_UniversalNewlineFgets(char *, int, FILE*, PyObject *);
size_t Py_UniversalNewlineFread(char *, size_t, FILE *, PyObject *);
PyObject * PyCObject_FromVoidPtr( void *cobj, void (*destruct)(void*));
PyObject * PyCObject_FromVoidPtrAndDesc(void *cobj, void *desc, void (*destruct)(void*,void*));
void * PyCObject_AsVoidPtr(PyObject *);
void * PyCObject_GetDesc(PyObject *);
void * PyCObject_Import(char *module_name, char *cobject_name);
int PyCObject_SetVoidPtr(PyObject *self, void *cobj);
int PyTraceBack_Here(struct _frame *);
int PyTraceBack_Print(PyObject *, PyObject *);
PyObject * PySlice_New(PyObject* start, PyObject* stop, PyObject* step);
int PySlice_GetIndices(PySliceObject *r, int length, int *start, int *stop, int *step);
int PySlice_GetIndicesEx(PySliceObject *r, int length, int *start, int *stop, int *step, int *slicelength);
PyObject * PyCell_New(PyObject *);
PyObject * PyCell_Get(PyObject *);
int PyCell_Set(PyObject *, PyObject *);
PyObject * PySeqIter_New(PyObject *);
PyObject * PyCallIter_New(PyObject *, PyObject *);
PyObject * PyGen_New(struct _frame *);
PyObject * PyDescr_NewMethod(PyTypeObject *, PyMethodDef *);
PyObject * PyDescr_NewClassMethod(PyTypeObject *, PyMethodDef *);
PyObject * PyDescr_NewMember(PyTypeObject *, struct PyMemberDef *);
PyObject * PyDescr_NewGetSet(PyTypeObject *, struct PyGetSetDef *);
PyObject * PyDescr_NewWrapper(PyTypeObject *, struct wrapperbase *, void *);
PyObject * PyDictProxy_New(PyObject *);
PyObject * PyWrapper_New(PyObject *, PyObject *);
PyObject * PyWeakref_NewRef(PyObject *ob, PyObject *callback);
PyObject * PyWeakref_NewProxy(PyObject *ob, PyObject *callback);
PyObject * PyWeakref_GetObject(PyObject *ref);
long _PyWeakref_GetWeakrefCount(PyWeakReference *head);
void _PyWeakref_ClearRef(PyWeakReference *self);
int PyCodec_Register( PyObject *search_function );
PyObject * _PyCodec_Lookup( const char *encoding );
PyObject * PyCodec_Encode( PyObject *object, const char *encoding, const char *errors );
PyObject * PyCodec_Decode( PyObject *object, const char *encoding, const char *errors );
PyObject * PyCodec_Encoder( const char *encoding );
PyObject * PyCodec_Decoder( const char *encoding );
PyObject * PyCodec_StreamReader( const char *encoding, PyObject *stream, const char *errors );
PyObject * PyCodec_StreamWriter( const char *encoding, PyObject *stream, const char *errors );
int PyCodec_RegisterError(const char *name, PyObject *error);
PyObject * PyCodec_LookupError(const char *name);
PyObject * PyCodec_StrictErrors(PyObject *exc);
PyObject * PyCodec_IgnoreErrors(PyObject *exc);
PyObject * PyCodec_ReplaceErrors(PyObject *exc);
PyObject * PyCodec_XMLCharRefReplaceErrors(PyObject *exc);
PyObject * PyCodec_BackslashReplaceErrors(PyObject *exc);
void PyErr_SetNone(PyObject *);
void PyErr_SetObject(PyObject *, PyObject *);
void PyErr_SetString(PyObject *, const char *);
PyObject * PyErr_Occurred(void);
void PyErr_Clear(void);
void PyErr_Fetch(PyObject **, PyObject **, PyObject **);
void PyErr_Restore(PyObject *, PyObject *, PyObject *);
int PyErr_GivenExceptionMatches(PyObject *, PyObject *);
int PyErr_ExceptionMatches(PyObject *);
void PyErr_NormalizeException(PyObject**, PyObject**, PyObject**);
int PyErr_BadArgument(void);
PyObject * PyErr_NoMemory(void);
PyObject * PyErr_SetFromErrno(PyObject *);
PyObject * PyErr_SetFromErrnoWithFilenameObject( PyObject *, PyObject *);
PyObject * PyErr_SetFromErrnoWithFilename(PyObject *, char *);
PyObject * PyErr_Format(PyObject *, const char *, ...) __attribute__((format(printf, 2, 3)));
void PyErr_BadInternalCall(void);
void _PyErr_BadInternalCall(char *filename, int lineno);
PyObject * PyErr_NewException(char *name, PyObject *base, PyObject *dict);
void PyErr_WriteUnraisable(PyObject *);
int PyErr_Warn(PyObject *, char *);
int PyErr_WarnExplicit(PyObject *, const char *, const char *, int, const char *, PyObject *);
int PyErr_CheckSignals(void);
void PyErr_SetInterrupt(void);
void PyErr_SyntaxLocation(const char *, int);
PyObject * PyErr_ProgramText(const char *, int);
PyObject * PyUnicodeDecodeError_Create( const char *, const char *, int, int, int, const char *);
PyObject * PyUnicodeEncodeError_Create( const char *, const Py_UNICODE *, int, int, int, const char *);
PyObject * PyUnicodeTranslateError_Create( const Py_UNICODE *, int, int, int, const char *);
PyObject * PyUnicodeEncodeError_GetEncoding(PyObject *);
PyObject * PyUnicodeDecodeError_GetEncoding(PyObject *);
PyObject * PyUnicodeEncodeError_GetObject(PyObject *);
PyObject * PyUnicodeDecodeError_GetObject(PyObject *);
PyObject * PyUnicodeTranslateError_GetObject(PyObject *);
int PyUnicodeEncodeError_GetStart(PyObject *, int *);
int PyUnicodeDecodeError_GetStart(PyObject *, int *);
int PyUnicodeTranslateError_GetStart(PyObject *, int *);
int PyUnicodeEncodeError_SetStart(PyObject *, int);
int PyUnicodeDecodeError_SetStart(PyObject *, int);
int PyUnicodeTranslateError_SetStart(PyObject *, int);
int PyUnicodeEncodeError_GetEnd(PyObject *, int *);
int PyUnicodeDecodeError_GetEnd(PyObject *, int *);
int PyUnicodeTranslateError_GetEnd(PyObject *, int *);
int PyUnicodeEncodeError_SetEnd(PyObject *, int);
int PyUnicodeDecodeError_SetEnd(PyObject *, int);
int PyUnicodeTranslateError_SetEnd(PyObject *, int);
PyObject * PyUnicodeEncodeError_GetReason(PyObject *);
PyObject * PyUnicodeDecodeError_GetReason(PyObject *);
PyObject * PyUnicodeTranslateError_GetReason(PyObject *);
int PyUnicodeEncodeError_SetReason( PyObject *, const char *);
int PyUnicodeDecodeError_SetReason( PyObject *, const char *);
int PyUnicodeTranslateError_SetReason( PyObject *, const char *);
int PyOS_snprintf(char *str, size_t size, const char *format, ...) __attribute__((format(printf, 3, 4)));
int PyOS_vsnprintf(char *str, size_t size, const char *format, va_list va) __attribute__((format(printf, 3, 0)));
PyInterpreterState * PyInterpreterState_New(void);
void PyInterpreterState_Clear(PyInterpreterState *);
void PyInterpreterState_Delete(PyInterpreterState *);
PyThreadState * PyThreadState_New(PyInterpreterState *);
void PyThreadState_Clear(PyThreadState *);
void PyThreadState_Delete(PyThreadState *);
void PyThreadState_DeleteCurrent(void);
PyThreadState * PyThreadState_Get(void);
PyThreadState * PyThreadState_Swap(PyThreadState *);
PyObject * PyThreadState_GetDict(void);
int PyThreadState_SetAsyncExc(long, PyObject *);
PyGILState_STATE PyGILState_Ensure(void);
void PyGILState_Release(PyGILState_STATE);
PyThreadState * PyGILState_GetThisThreadState(void);
PyInterpreterState * PyInterpreterState_Head(void);
PyInterpreterState * PyInterpreterState_Next(PyInterpreterState *);
PyThreadState * PyInterpreterState_ThreadHead(PyInterpreterState *);
PyThreadState * PyThreadState_Next(PyThreadState *);
int PyArg_Parse(PyObject *, char *, ...);
int PyArg_ParseTuple(PyObject *, char *, ...);
int PyArg_ParseTupleAndKeywords(PyObject *, PyObject *, char *, char **, ...);
int PyArg_UnpackTuple(PyObject *, char *, int, int, ...);
PyObject * Py_BuildValue(char *, ...);
int PyArg_VaParse(PyObject *, char *, va_list);
int PyArg_VaParseTupleAndKeywords(PyObject *, PyObject *, char *, char **, va_list);
PyObject * Py_VaBuildValue(char *, va_list);
int PyModule_AddObject(PyObject *, char *, PyObject *);
int PyModule_AddIntConstant(PyObject *, char *, long);
int PyModule_AddStringConstant(PyObject *, char *, char *);
PyObject * Py_InitModule4(char *name, PyMethodDef *methods, char *doc, PyObject *self, int apiver);
void Py_SetProgramName(char *);
char * Py_GetProgramName(void);
void Py_SetPythonHome(char *);
char * Py_GetPythonHome(void);
void Py_Initialize(void);
void Py_InitializeEx(int);
void Py_Finalize(void);
int Py_IsInitialized(void);
PyThreadState * Py_NewInterpreter(void);
void Py_EndInterpreter(PyThreadState *);
int PyRun_AnyFile(FILE *, const char *);
int PyRun_AnyFileEx(FILE *, const char *, int);
int PyRun_AnyFileFlags(FILE *, const char *, PyCompilerFlags *);
int PyRun_AnyFileExFlags(FILE *, const char *, int, PyCompilerFlags *);
int PyRun_SimpleString(const char *);
int PyRun_SimpleStringFlags(const char *, PyCompilerFlags *);
int PyRun_SimpleFile(FILE *, const char *);
int PyRun_SimpleFileEx(FILE *, const char *, int);
int PyRun_SimpleFileExFlags(FILE *, const char *, int, PyCompilerFlags *);
int PyRun_InteractiveOne(FILE *, const char *);
int PyRun_InteractiveOneFlags(FILE *, const char *, PyCompilerFlags *);
int PyRun_InteractiveLoop(FILE *, const char *);
int PyRun_InteractiveLoopFlags(FILE *, const char *, PyCompilerFlags *);
struct _node * PyParser_SimpleParseString(const char *, int);
struct _node * PyParser_SimpleParseFile(FILE *, const char *, int);
struct _node * PyParser_SimpleParseStringFlags(const char *, int, int);
struct _node * PyParser_SimpleParseStringFlagsFilename(const char *, const char *, int, int);
struct _node * PyParser_SimpleParseFileFlags(FILE *, const char *, int, int);
PyObject * PyRun_String(const char *, int, PyObject *, PyObject *);
PyObject * PyRun_File(FILE *, const char *, int, PyObject *, PyObject *);
PyObject * PyRun_FileEx(FILE *, const char *, int, PyObject *, PyObject *, int);
PyObject * PyRun_StringFlags(const char *, int, PyObject *, PyObject *, PyCompilerFlags *);
PyObject * PyRun_FileFlags(FILE *, const char *, int, PyObject *, PyObject *, PyCompilerFlags *);
PyObject * PyRun_FileExFlags(FILE *, const char *, int, PyObject *, PyObject *, int, PyCompilerFlags *);
PyObject * Py_CompileString(const char *, const char *, int);
PyObject * Py_CompileStringFlags(const char *, const char *, int, PyCompilerFlags *);
struct symtable * Py_SymtableString(const char *, const char *, int);
void PyErr_Print(void);
void PyErr_PrintEx(int);
void PyErr_Display(PyObject *, PyObject *, PyObject *);
int Py_AtExit(void (*func)(void));
void Py_Exit(int);
int Py_FdIsInteractive(FILE *, const char *);
int Py_Main(int argc, char **argv);
char * Py_GetProgramFullPath(void);
char * Py_GetPrefix(void);
char * Py_GetExecPrefix(void);
char * Py_GetPath(void);
const char * Py_GetVersion(void);
const char * Py_GetPlatform(void);
const char * Py_GetCopyright(void);
const char * Py_GetCompiler(void);
const char * Py_GetBuildInfo(void);
PyObject * _PyBuiltin_Init(void);
PyObject * _PySys_Init(void);
void _PyImport_Init(void);
void _PyExc_Init(void);
void _PyImportHooks_Init(void);
int _PyFrame_Init(void);
int _PyInt_Init(void);
void _PyExc_Fini(void);
void _PyImport_Fini(void);
void PyMethod_Fini(void);
void PyFrame_Fini(void);
void PyCFunction_Fini(void);
void PyTuple_Fini(void);
void PyList_Fini(void);
void PyString_Fini(void);
void PyInt_Fini(void);
void PyFloat_Fini(void);
void PyOS_FiniInterrupts(void);
char * PyOS_Readline(FILE *, FILE *, char *);
PyOS_sighandler_t PyOS_getsig(int);
PyOS_sighandler_t PyOS_setsig(int, PyOS_sighandler_t);
PyObject * PyEval_CallObjectWithKeywords( PyObject *, PyObject *, PyObject *);
PyObject * PyEval_CallObject(PyObject *, PyObject *);
PyObject * PyEval_CallFunction(PyObject *obj, char *format, ...);
PyObject * PyEval_CallMethod(PyObject *obj, char *methodname, char *format, ...);
void PyEval_SetProfile(Py_tracefunc, PyObject *);
void PyEval_SetTrace(Py_tracefunc, PyObject *);
PyObject * PyEval_GetBuiltins(void);
PyObject * PyEval_GetGlobals(void);
PyObject * PyEval_GetLocals(void);
struct _frame * PyEval_GetFrame(void);
int PyEval_GetRestricted(void);
int PyEval_MergeCompilerFlags(PyCompilerFlags *cf);
int Py_FlushLine(void);
int Py_AddPendingCall(int (*func)(void *), void *arg);
int Py_MakePendingCalls(void);
void Py_SetRecursionLimit(int);
int Py_GetRecursionLimit(void);
int _Py_CheckRecursiveCall(char *where);
char * PyEval_GetFuncName(PyObject *);
char * PyEval_GetFuncDesc(PyObject *);
PyObject * PyEval_GetCallStats(PyObject *);
PyObject * PyEval_EvalFrame(struct _frame *);
PyThreadState * PyEval_SaveThread(void);
void PyEval_RestoreThread(PyThreadState *);
int PyEval_ThreadsInitialized(void);
void PyEval_InitThreads(void);
void PyEval_AcquireLock(void);
void PyEval_ReleaseLock(void);
void PyEval_AcquireThread(PyThreadState *tstate);
void PyEval_ReleaseThread(PyThreadState *tstate);
void PyEval_ReInitThreads(void);
int _PyEval_SliceIndex(PyObject *, int *);
PyObject * PySys_GetObject(char *);
int PySys_SetObject(char *, PyObject *);
FILE * PySys_GetFile(char *, FILE *);
void PySys_SetArgv(int, char **);
void PySys_SetPath(char *);
void PySys_WriteStdout(const char *format, ...) __attribute__((format(printf, 1, 2)));
void PySys_WriteStderr(const char *format, ...) __attribute__((format(printf, 1, 2)));
void PySys_ResetWarnOptions(void);
void PySys_AddWarnOption(char *);
int PyOS_InterruptOccurred(void);
void PyOS_InitInterrupts(void);
void PyOS_AfterFork(void);
long PyImport_GetMagicNumber(void);
PyObject * PyImport_ExecCodeModule(char *name, PyObject *co);
PyObject * PyImport_ExecCodeModuleEx( char *name, PyObject *co, char *pathname);
PyObject * PyImport_GetModuleDict(void);
PyObject * PyImport_AddModule(char *name);
PyObject * PyImport_ImportModule(char *name);
PyObject * PyImport_ImportModuleEx( char *name, PyObject *globals, PyObject *locals, PyObject *fromlist);
PyObject * PyImport_Import(PyObject *name);
PyObject * PyImport_ReloadModule(PyObject *m);
void PyImport_Cleanup(void);
int PyImport_ImportFrozenModule(char *);
struct filedescr * _PyImport_FindModule( const char *, PyObject *, char *, size_t, FILE **, PyObject **);
int _PyImport_IsScript(struct filedescr *);
PyObject *_PyImport_FindExtension(char *, char *);
PyObject *_PyImport_FixupExtension(char *, char *);
int PyImport_AppendInittab(char *name, void (*initfunc)(void));
int PyImport_ExtendInittab(struct _inittab *newtab);
int PyObject_Cmp(PyObject *o1, PyObject *o2, int *result);
int PyCallable_Check(PyObject *o);
PyObject * PyObject_Call(PyObject *callable_object, PyObject *args, PyObject *kw);
PyObject * PyObject_CallObject(PyObject *callable_object, PyObject *args);
PyObject * PyObject_CallFunction(PyObject *callable_object, char *format, ...);
PyObject * PyObject_CallMethod(PyObject *o, char *m, char *format, ...);
PyObject * PyObject_CallFunctionObjArgs(PyObject *callable, ...);
PyObject * PyObject_CallMethodObjArgs(PyObject *o, PyObject *m, ...);
PyObject * PyObject_Type(PyObject *o);
int PyObject_Size(PyObject *o);
int PyObject_Length(PyObject *o);
PyObject * PyObject_GetItem(PyObject *o, PyObject *key);
int PyObject_SetItem(PyObject *o, PyObject *key, PyObject *v);
int PyObject_DelItemString(PyObject *o, char *key);
int PyObject_DelItem(PyObject *o, PyObject *key);
int PyObject_AsCharBuffer(PyObject *obj, const char **buffer, int *buffer_len);
int PyObject_CheckReadBuffer(PyObject *obj);
int PyObject_AsReadBuffer(PyObject *obj, const void **buffer, int *buffer_len);
int PyObject_AsWriteBuffer(PyObject *obj, void **buffer, int *buffer_len);
PyObject * PyObject_GetIter(PyObject *);
PyObject * PyIter_Next(PyObject *);
int PyNumber_Check(PyObject *o);
PyObject * PyNumber_Add(PyObject *o1, PyObject *o2);
PyObject * PyNumber_Subtract(PyObject *o1, PyObject *o2);
PyObject * PyNumber_Multiply(PyObject *o1, PyObject *o2);
PyObject * PyNumber_Divide(PyObject *o1, PyObject *o2);
PyObject * PyNumber_FloorDivide(PyObject *o1, PyObject *o2);
PyObject * PyNumber_TrueDivide(PyObject *o1, PyObject *o2);
PyObject * PyNumber_Remainder(PyObject *o1, PyObject *o2);
PyObject * PyNumber_Divmod(PyObject *o1, PyObject *o2);
PyObject * PyNumber_Power(PyObject *o1, PyObject *o2, PyObject *o3);
PyObject * PyNumber_Negative(PyObject *o);
PyObject * PyNumber_Positive(PyObject *o);
PyObject * PyNumber_Absolute(PyObject *o);
PyObject * PyNumber_Invert(PyObject *o);
PyObject * PyNumber_Lshift(PyObject *o1, PyObject *o2);
PyObject * PyNumber_Rshift(PyObject *o1, PyObject *o2);
PyObject * PyNumber_And(PyObject *o1, PyObject *o2);
PyObject * PyNumber_Xor(PyObject *o1, PyObject *o2);
PyObject * PyNumber_Or(PyObject *o1, PyObject *o2);
PyObject * PyNumber_Int(PyObject *o);
PyObject * PyNumber_Long(PyObject *o);
PyObject * PyNumber_Float(PyObject *o);
PyObject * PyNumber_InPlaceAdd(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlaceSubtract(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlaceMultiply(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlaceDivide(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlaceFloorDivide(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlaceTrueDivide(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlaceRemainder(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlacePower(PyObject *o1, PyObject *o2, PyObject *o3);
PyObject * PyNumber_InPlaceLshift(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlaceRshift(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlaceAnd(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlaceXor(PyObject *o1, PyObject *o2);
PyObject * PyNumber_InPlaceOr(PyObject *o1, PyObject *o2);
int PySequence_Check(PyObject *o);
int PySequence_Size(PyObject *o);
int PySequence_Length(PyObject *o);
PyObject * PySequence_Concat(PyObject *o1, PyObject *o2);
PyObject * PySequence_Repeat(PyObject *o, int count);
PyObject * PySequence_GetItem(PyObject *o, int i);
PyObject * PySequence_GetSlice(PyObject *o, int i1, int i2);
int PySequence_SetItem(PyObject *o, int i, PyObject *v);
int PySequence_DelItem(PyObject *o, int i);
int PySequence_SetSlice(PyObject *o, int i1, int i2, PyObject *v);
int PySequence_DelSlice(PyObject *o, int i1, int i2);
PyObject * PySequence_Tuple(PyObject *o);
PyObject * PySequence_List(PyObject *o);
PyObject * PySequence_Fast(PyObject *o, const char* m);
int PySequence_Count(PyObject *o, PyObject *value);
int PySequence_Contains(PyObject *seq, PyObject *ob);
int _PySequence_IterSearch(PyObject *seq, PyObject *obj, int operation);
int PySequence_In(PyObject *o, PyObject *value);
int PySequence_Index(PyObject *o, PyObject *value);
PyObject * PySequence_InPlaceConcat(PyObject *o1, PyObject *o2);
PyObject * PySequence_InPlaceRepeat(PyObject *o, int count);
int PyMapping_Check(PyObject *o);
int PyMapping_Size(PyObject *o);
int PyMapping_Length(PyObject *o);
int PyMapping_HasKeyString(PyObject *o, char *key);
int PyMapping_HasKey(PyObject *o, PyObject *key);
PyObject * PyMapping_GetItemString(PyObject *o, char *key);
int PyMapping_SetItemString(PyObject *o, char *key, PyObject *value);
int PyObject_IsInstance(PyObject *object, PyObject *typeorclass);
int PyObject_IsSubclass(PyObject *object, PyObject *typeorclass);
PyCodeObject * PyNode_Compile(struct _node *, const char *);
PyCodeObject * PyCode_New( int, int, int, int, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int, PyObject *);
int PyCode_Addr2Line(PyCodeObject *, int);
PyFutureFeatures * PyNode_Future(struct _node *, const char *);
PyCodeObject * PyNode_CompileFlags(struct _node *, const char *, PyCompilerFlags *);
PyObject * PyEval_EvalCode(PyCodeObject *, PyObject *, PyObject *);
PyObject * PyEval_EvalCodeEx(PyCodeObject *co, PyObject *globals, PyObject *locals, PyObject **args, int argc, PyObject **kwds, int kwdc, PyObject **defs, int defc, PyObject *closure);
PyObject * _PyEval_CallTracing(PyObject *func, PyObject *args);
double PyOS_ascii_strtod(const char *str, char **ptr);
double PyOS_ascii_atof(const char *str);
char * PyOS_ascii_formatd(char *buffer, int buf_len, const char *format, double d);
int _Py_Mangle(char *p, char *name, char *buffer, size_t maxlen);

######################################

typedef struct _object {
 int ob_refcnt; struct _typeobject *ob_type;
} PyObject;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type; int ob_size;
} PyVarObject;
typedef PyObject * (*unaryfunc)(PyObject *);
typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
typedef int (*inquiry)(PyObject *);
typedef int (*coercion)(PyObject **, PyObject **);
typedef PyObject *(*intargfunc)(PyObject *, int);
typedef PyObject *(*intintargfunc)(PyObject *, int, int);
typedef int(*intobjargproc)(PyObject *, int, PyObject *);
typedef int(*intintobjargproc)(PyObject *, int, int, PyObject *);
typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
typedef int (*getreadbufferproc)(PyObject *, int, void **);
typedef int (*getwritebufferproc)(PyObject *, int, void **);
typedef int (*getsegcountproc)(PyObject *, int *);
typedef int (*getcharbufferproc)(PyObject *, int, const char **);
typedef int (*objobjproc)(PyObject *, PyObject *);
typedef int (*visitproc)(PyObject *, void *);
typedef int (*traverseproc)(PyObject *, visitproc, void *);
typedef struct {
 binaryfunc nb_add;
 binaryfunc nb_subtract;
 binaryfunc nb_multiply;
 binaryfunc nb_divide;
 binaryfunc nb_remainder;
 binaryfunc nb_divmod;
 ternaryfunc nb_power;
 unaryfunc nb_negative;
 unaryfunc nb_positive;
 unaryfunc nb_absolute;
 inquiry nb_nonzero;
 unaryfunc nb_invert;
 binaryfunc nb_lshift;
 binaryfunc nb_rshift;
 binaryfunc nb_and;
 binaryfunc nb_xor;
 binaryfunc nb_or;
 coercion nb_coerce;
 unaryfunc nb_int;
 unaryfunc nb_long;
 unaryfunc nb_float;
 unaryfunc nb_oct;
 unaryfunc nb_hex;
 binaryfunc nb_inplace_add;
 binaryfunc nb_inplace_subtract;
 binaryfunc nb_inplace_multiply;
 binaryfunc nb_inplace_divide;
 binaryfunc nb_inplace_remainder;
 ternaryfunc nb_inplace_power;
 binaryfunc nb_inplace_lshift;
 binaryfunc nb_inplace_rshift;
 binaryfunc nb_inplace_and;
 binaryfunc nb_inplace_xor;
 binaryfunc nb_inplace_or;
 binaryfunc nb_floor_divide;
 binaryfunc nb_true_divide;
 binaryfunc nb_inplace_floor_divide;
 binaryfunc nb_inplace_true_divide;
} PyNumberMethods;
typedef struct {
 inquiry sq_length;
 binaryfunc sq_concat;
 intargfunc sq_repeat;
 intargfunc sq_item;
 intintargfunc sq_slice;
 intobjargproc sq_ass_item;
 intintobjargproc sq_ass_slice;
 objobjproc sq_contains;
 binaryfunc sq_inplace_concat;
 intargfunc sq_inplace_repeat;
} PySequenceMethods;
typedef struct {
 inquiry mp_length;
 binaryfunc mp_subscript;
 objobjargproc mp_ass_subscript;
} PyMappingMethods;
typedef struct {
 getreadbufferproc bf_getreadbuffer;
 getwritebufferproc bf_getwritebuffer;
 getsegcountproc bf_getsegcount;
 getcharbufferproc bf_getcharbuffer;
} PyBufferProcs;
typedef void (*freefunc)(void *);
typedef void (*destructor)(PyObject *);
typedef int (*printfunc)(PyObject *, FILE *, int);
typedef PyObject *(*getattrfunc)(PyObject *, char *);
typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
typedef int (*cmpfunc)(PyObject *, PyObject *);
typedef PyObject *(*reprfunc)(PyObject *);
typedef long (*hashfunc)(PyObject *);
typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
typedef PyObject *(*getiterfunc) (PyObject *);
typedef PyObject *(*iternextfunc) (PyObject *);
typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
typedef PyObject *(*allocfunc)(struct _typeobject *, int);
typedef struct _typeobject {
 int ob_refcnt; struct _typeobject *ob_type; int ob_size;
 char *tp_name;
 int tp_basicsize, tp_itemsize;
 destructor tp_dealloc;
 printfunc tp_print;
 getattrfunc tp_getattr;
 setattrfunc tp_setattr;
 cmpfunc tp_compare;
 reprfunc tp_repr;
 PyNumberMethods *tp_as_number;
 PySequenceMethods *tp_as_sequence;
 PyMappingMethods *tp_as_mapping;
 hashfunc tp_hash;
 ternaryfunc tp_call;
 reprfunc tp_str;
 getattrofunc tp_getattro;
 setattrofunc tp_setattro;
 PyBufferProcs *tp_as_buffer;
 long tp_flags;
 char *tp_doc;
 traverseproc tp_traverse;
 inquiry tp_clear;
 richcmpfunc tp_richcompare;
 long tp_weaklistoffset;
 getiterfunc tp_iter;
 iternextfunc tp_iternext;
 struct PyMethodDef *tp_methods;
 struct PyMemberDef *tp_members;
 struct PyGetSetDef *tp_getset;
 struct _typeobject *tp_base;
 PyObject *tp_dict;
 descrgetfunc tp_descr_get;
 descrsetfunc tp_descr_set;
 long tp_dictoffset;
 initproc tp_init;
 allocfunc tp_alloc;
 newfunc tp_new;
 freefunc tp_free;
 inquiry tp_is_gc;
 PyObject *tp_bases;
 PyObject *tp_mro;
 PyObject *tp_cache;
 PyObject *tp_subclasses;
 PyObject *tp_weaklist;
 destructor tp_del;
} PyTypeObject;
typedef struct _heaptypeobject {
 PyTypeObject type;
 PyNumberMethods as_number;
 PyMappingMethods as_mapping;
 PySequenceMethods as_sequence;
 PyBufferProcs as_buffer;
 PyObject *name, *slots;
} PyHeapTypeObject;
extern PyTypeObject PyType_Type;
extern PyTypeObject PyBaseObject_Type;
extern PyTypeObject PySuper_Type;
extern int _PyObject_SlotCompare(PyObject *, PyObject *);
extern PyObject _Py_NoneStruct;
extern PyObject _Py_NotImplementedStruct;
extern int _Py_SwappedOp[];
extern int _PyTrash_delete_nesting;
extern PyObject * _PyTrash_delete_later;
typedef union _gc_head {
 struct {
 union _gc_head *gc_next;
 union _gc_head *gc_prev;
 int gc_refs;
 } gc;
 long double dummy;
} PyGC_Head;
extern PyGC_Head *_PyGC_generation0;
typedef unsigned int Py_uintptr_t;
typedef int Py_intptr_t;
extern int Py_DebugFlag;
extern int Py_VerboseFlag;
extern int Py_InteractiveFlag;
extern int Py_OptimizeFlag;
extern int Py_NoSiteFlag;
extern int Py_UseClassExceptionsFlag;
extern int Py_FrozenFlag;
extern int Py_TabcheckFlag;
extern int Py_UnicodeFlag;
extern int Py_IgnoreEnvironmentFlag;
extern int Py_DivisionWarningFlag;
extern int _Py_QnewFlag;
enum
{
 _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
 _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
 _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
 _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
 _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
 _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
 _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
 _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
 _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
 _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
 _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
 _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
typedef unsigned int Py_UCS4;
typedef unsigned short Py_UNICODE;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 int length;
 Py_UNICODE *str;
 long hash;
 PyObject *defenc;
} PyUnicodeObject;
extern PyTypeObject PyUnicode_Type;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 long ob_ival;
} PyIntObject;
extern PyTypeObject PyInt_Type;
typedef PyIntObject PyBoolObject;
extern PyTypeObject PyBool_Type;
extern PyIntObject _Py_ZeroStruct, _Py_TrueStruct;
typedef struct _longobject PyLongObject;
extern PyTypeObject PyLong_Type;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 double ob_fval;
} PyFloatObject;
extern PyTypeObject PyFloat_Type;
typedef struct {
 double real;
 double imag;
} Py_complex;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 Py_complex cval;
} PyComplexObject;
extern PyTypeObject PyComplex_Type;
extern PyTypeObject PyRange_Type;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type; int ob_size;
 long ob_shash;
 int ob_sstate;
 char ob_sval[1];
} PyStringObject;
extern PyTypeObject PyBaseString_Type;
extern PyTypeObject PyString_Type;
extern PyTypeObject PyBuffer_Type;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type; int ob_size;
 PyObject *ob_item[1];
} PyTupleObject;
extern PyTypeObject PyTuple_Type;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type; int ob_size;
 PyObject **ob_item;
 int allocated;
} PyListObject;
extern PyTypeObject PyList_Type;
typedef struct {
 long me_hash;
 PyObject *me_key;
 PyObject *me_value;
} PyDictEntry;
typedef struct _dictobject PyDictObject;
struct _dictobject {
 int ob_refcnt; struct _typeobject *ob_type;
 int ma_fill;
 int ma_used;
 int ma_mask;
 PyDictEntry *ma_table;
 PyDictEntry *(*ma_lookup)(PyDictObject *mp, PyObject *key, long hash);
 PyDictEntry ma_smalltable[8];
};
extern PyTypeObject PyDict_Type;
extern PyTypeObject PyEnum_Type;
extern PyTypeObject PyReversed_Type;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 PyObject *data;
 long hash;
 PyObject *weakreflist;
} PySetObject;
extern PyTypeObject PySet_Type;
extern PyTypeObject PyFrozenSet_Type;
extern PyTypeObject PyCFunction_Type;
typedef PyObject *(*PyCFunction)(PyObject *, PyObject *);
typedef PyObject *(*PyCFunctionWithKeywords)(PyObject *, PyObject *, PyObject *);
typedef PyObject *(*PyNoArgsFunction)(PyObject *);
struct PyMethodDef {
 char *ml_name;
 PyCFunction ml_meth;
 int ml_flags;
 char *ml_doc;
};
typedef struct PyMethodDef PyMethodDef;
typedef struct PyMethodChain {
 PyMethodDef *methods;
 struct PyMethodChain *link;
} PyMethodChain;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 PyMethodDef *m_ml;
 PyObject *m_self;
 PyObject *m_module;
} PyCFunctionObject;
extern PyTypeObject PyModule_Type;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 PyObject *func_code;
 PyObject *func_globals;
 PyObject *func_defaults;
 PyObject *func_closure;
 PyObject *func_doc;
 PyObject *func_name;
 PyObject *func_dict;
 PyObject *func_weakreflist;
 PyObject *func_module;
} PyFunctionObject;
extern PyTypeObject PyFunction_Type;
extern PyTypeObject PyClassMethod_Type;
extern PyTypeObject PyStaticMethod_Type;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 PyObject *cl_bases;
 PyObject *cl_dict;
 PyObject *cl_name;
 PyObject *cl_getattr;
 PyObject *cl_setattr;
 PyObject *cl_delattr;
} PyClassObject;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 PyClassObject *in_class;
 PyObject *in_dict;
 PyObject *in_weakreflist;
} PyInstanceObject;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 PyObject *im_func;
 PyObject *im_self;
 PyObject *im_class;
 PyObject *im_weakreflist;
} PyMethodObject;
extern PyTypeObject PyClass_Type, PyInstance_Type, PyMethod_Type;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 FILE *f_fp;
 PyObject *f_name;
 PyObject *f_mode;
 int (*f_close)(FILE *);
 int f_softspace;
 int f_binary;
 char* f_buf;
 char* f_bufend;
 char* f_bufptr;
 char *f_setbuf;
 int f_univ_newline;
 int f_newlinetypes;
 int f_skipnextlf;
 PyObject *f_encoding;
 PyObject *weakreflist;
} PyFileObject;
extern PyTypeObject PyFile_Type;
extern const char * Py_FileSystemDefaultEncoding;
extern PyTypeObject PyCObject_Type;
struct _frame;
typedef struct _traceback {
 int ob_refcnt; struct _typeobject *ob_type;
 struct _traceback *tb_next;
 struct _frame *tb_frame;
 int tb_lasti;
 int tb_lineno;
} PyTracebackObject;
extern PyTypeObject PyTraceBack_Type;
extern PyObject _Py_EllipsisObject;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 PyObject *start, *stop, *step;
} PySliceObject;
extern PyTypeObject PySlice_Type;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 PyObject *ob_ref;
} PyCellObject;
extern PyTypeObject PyCell_Type;
extern PyTypeObject PySeqIter_Type;
extern PyTypeObject PyCallIter_Type;
struct _frame;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 struct _frame *gi_frame;
 int gi_running;
 PyObject *gi_weakreflist;
} PyGenObject;
extern PyTypeObject PyGen_Type;
typedef PyObject *(*getter)(PyObject *, void *);
typedef int (*setter)(PyObject *, PyObject *, void *);
typedef struct PyGetSetDef {
 char *name;
 getter get;
 setter set;
 char *doc;
 void *closure;
} PyGetSetDef;
typedef PyObject *(*wrapperfunc)(PyObject *self, PyObject *args, void *wrapped);
typedef PyObject *(*wrapperfunc_kwds)(PyObject *self, PyObject *args, void *wrapped, PyObject *kwds);
struct wrapperbase {
 char *name;
 int offset;
 void *function;
 wrapperfunc wrapper;
 char *doc;
 int flags;
 PyObject *name_strobj;
};
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type; PyTypeObject *d_type; PyObject *d_name;
} PyDescrObject;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type; PyTypeObject *d_type; PyObject *d_name;
 PyMethodDef *d_method;
} PyMethodDescrObject;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type; PyTypeObject *d_type; PyObject *d_name;
 struct PyMemberDef *d_member;
} PyMemberDescrObject;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type; PyTypeObject *d_type; PyObject *d_name;
 PyGetSetDef *d_getset;
} PyGetSetDescrObject;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type; PyTypeObject *d_type; PyObject *d_name;
 struct wrapperbase *d_base;
 void *d_wrapped;
} PyWrapperDescrObject;
extern PyTypeObject PyWrapperDescr_Type;
extern PyTypeObject PyProperty_Type;
typedef struct _PyWeakReference PyWeakReference;
struct _PyWeakReference {
 int ob_refcnt; struct _typeobject *ob_type;
 PyObject *wr_object;
 PyObject *wr_callback;
 long hash;
 PyWeakReference *wr_prev;
 PyWeakReference *wr_next;
};
extern PyTypeObject _PyWeakref_RefType;
extern PyTypeObject _PyWeakref_ProxyType;
extern PyTypeObject _PyWeakref_CallableProxyType;
extern PyObject * PyExc_Exception;
extern PyObject * PyExc_StopIteration;
extern PyObject * PyExc_StandardError;
extern PyObject * PyExc_ArithmeticError;
extern PyObject * PyExc_LookupError;
extern PyObject * PyExc_AssertionError;
extern PyObject * PyExc_AttributeError;
extern PyObject * PyExc_EOFError;
extern PyObject * PyExc_FloatingPointError;
extern PyObject * PyExc_EnvironmentError;
extern PyObject * PyExc_IOError;
extern PyObject * PyExc_OSError;
extern PyObject * PyExc_ImportError;
extern PyObject * PyExc_IndexError;
extern PyObject * PyExc_KeyError;
extern PyObject * PyExc_KeyboardInterrupt;
extern PyObject * PyExc_MemoryError;
extern PyObject * PyExc_NameError;
extern PyObject * PyExc_OverflowError;
extern PyObject * PyExc_RuntimeError;
extern PyObject * PyExc_NotImplementedError;
extern PyObject * PyExc_SyntaxError;
extern PyObject * PyExc_IndentationError;
extern PyObject * PyExc_TabError;
extern PyObject * PyExc_ReferenceError;
extern PyObject * PyExc_SystemError;
extern PyObject * PyExc_SystemExit;
extern PyObject * PyExc_TypeError;
extern PyObject * PyExc_UnboundLocalError;
extern PyObject * PyExc_UnicodeError;
extern PyObject * PyExc_UnicodeEncodeError;
extern PyObject * PyExc_UnicodeDecodeError;
extern PyObject * PyExc_UnicodeTranslateError;
extern PyObject * PyExc_ValueError;
extern PyObject * PyExc_ZeroDivisionError;
extern PyObject * PyExc_MemoryErrorInst;
extern PyObject * PyExc_Warning;
extern PyObject * PyExc_UserWarning;
extern PyObject * PyExc_DeprecationWarning;
extern PyObject * PyExc_PendingDeprecationWarning;
extern PyObject * PyExc_SyntaxWarning;
extern PyObject * PyExc_OverflowWarning;
extern PyObject * PyExc_RuntimeWarning;
extern PyObject * PyExc_FutureWarning;
struct _ts;
struct _is;
typedef struct _is {
 struct _is *next;
 struct _ts *tstate_head;
 PyObject *modules;
 PyObject *sysdict;
 PyObject *builtins;
 PyObject *codec_search_path;
 PyObject *codec_search_cache;
 PyObject *codec_error_registry;
 int dlopenflags;
} PyInterpreterState;
struct _frame;
typedef int (*Py_tracefunc)(PyObject *, struct _frame *, int, PyObject *);
typedef struct _ts {
 struct _ts *next;
 PyInterpreterState *interp;
 struct _frame *frame;
 int recursion_depth;
 int tracing;
 int use_tracing;
 Py_tracefunc c_profilefunc;
 Py_tracefunc c_tracefunc;
 PyObject *c_profileobj;
 PyObject *c_traceobj;
 PyObject *curexc_type;
 PyObject *curexc_value;
 PyObject *curexc_traceback;
 PyObject *exc_type;
 PyObject *exc_value;
 PyObject *exc_traceback;
 PyObject *dict;
 int tick_counter;
 int gilstate_counter;
 PyObject *async_exc;
 long thread_id;
} PyThreadState;
extern PyThreadState * _PyThreadState_Current;
typedef
 enum {PyGILState_LOCKED, PyGILState_UNLOCKED}
 PyGILState_STATE;
typedef struct _frame *(*PyThreadFrameGetter)(PyThreadState *self_);
extern PyThreadFrameGetter _PyThreadState_GetFrame;
struct _frame;
extern char * _Py_PackageContext;
typedef struct {
 int cf_flags;
} PyCompilerFlags;
extern int (*PyOS_InputHook)(void);
extern char *(*PyOS_ReadlineFunctionPointer)(FILE *, FILE *, char *);
extern PyThreadState* _PyOS_ReadlineTState;
typedef void (*PyOS_sighandler_t)(int);
extern int _Py_CheckRecursionLimit;
extern volatile int _Py_Ticker;
extern int _Py_CheckInterval;
extern PyObject * _PySys_TraceFunc, *_PySys_ProfileFunc;
extern int _PySys_CheckInterval;
struct _inittab {
 char *name;
 void (*initfunc)(void);
};
extern struct _inittab * PyImport_Inittab;
struct _frozen {
 char *name;
 unsigned char *code;
 int size;
};
extern struct _frozen * PyImport_FrozenModules;
typedef struct {
 int ob_refcnt; struct _typeobject *ob_type;
 int co_argcount;
 int co_nlocals;
 int co_stacksize;
 int co_flags;
 PyObject *co_code;
 PyObject *co_consts;
 PyObject *co_names;
 PyObject *co_varnames;
 PyObject *co_freevars;
 PyObject *co_cellvars;
 PyObject *co_filename;
 PyObject *co_name;
 int co_firstlineno;
 PyObject *co_lnotab;
} PyCodeObject;
extern PyTypeObject PyCode_Type;
struct _node;
typedef struct {
 int ff_found_docstring;
 int ff_last_lineno;
 int ff_features;
} PyFutureFeatures;
