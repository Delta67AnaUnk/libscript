
Python 2.4.3 (da documentação de 2006-03-29)
581 funções

@@@ shorthand (função utilitária que abrevia a chamada a outra da API)
@@~ shorthand com pequena variação além de passar parâmetros padrão (por exemplo, verifica validade dos parâmetros)
@@n função C equivalente a uma função ou variável Python
%%% "somente para uso interno"

Interface de alto nível
	Loop padrão do interpretador
		int Py_Main(int argc, char **argv)
		@@@ int PyRun_InteractiveOne(  FILE *fp, const char *filename)
		int PyRun_InteractiveOneFlags(  FILE *fp, const char *filename, PyCompilerFlags *flags)
		@@@ int PyRun_InteractiveLoop(  FILE *fp, const char *filename)
		int PyRun_InteractiveLoopFlags(  FILE *fp, const char *filename, PyCompilerFlags *flags)
	Executar um arquivo
		@@@ int PyRun_AnyFile(  FILE *fp, const char *filename)
		@@@ int PyRun_AnyFileFlags(  FILE *fp, const char *filename, PyCompilerFlags *flags)
		@@@ int PyRun_AnyFileEx(  FILE *fp, const char *filename, int closeit)
		int PyRun_AnyFileExFlags(  FILE *fp, const char *filename, int closeit, PyCompilerFlags *flags)
		@@@ int PyRun_SimpleFile(  FILE *fp, const char *filename)
		@@@ int PyRun_SimpleFileFlags(  FILE *fp, const char *filename, PyCompilerFlags *flags)
		@@@ int PyRun_SimpleFileEx(  FILE *fp, const char *filename, int closeit)
		int PyRun_SimpleFileExFlags(  FILE *fp, const char *filename, int closeit, PyCompilerFlags *flags)
		@@@ PyObject* PyRun_File(  FILE *fp, const char *filename, int start, PyObject *globals, PyObject *locals)
		@@@ PyObject* PyRun_FileEx(  FILE *fp, const char *filename, int start, PyObject *globals, PyObject *locals, int closeit)
		@@@ PyObject* PyRun_FileFlags(  FILE *fp, const char *filename, int start, PyObject *globals, PyObject *locals, PyCompilerFlags *flags)
		PyObject* PyRun_FileExFlags(  FILE *fp, const char *filename, int start, PyObject *globals, PyObject *locals, int closeit, PyCompilerFlags *flags)
	Executar uma string
		@@@ int PyRun_SimpleString(  const char *command)
		int PyRun_SimpleStringFlags(  const char *command, PyCompilerFlags *flags)
		@@@ PyObject* PyRun_String(  const char *str, int start, PyObject *globals, PyObject *locals)
		PyObject* PyRun_StringFlags(  const char *str, int start, PyObject *globals, PyObject *locals, PyCompilerFlags *flags)
	Pré-compilar código
		@@@ struct _node* PyParser_SimpleParseString(  const char *str, int start)
		@@@ struct _node* PyParser_SimpleParseStringFlags(   const char *str, int start, int flags)
		struct _node* PyParser_SimpleParseStringFlagsFilename(   const char *str, const char *filename, int start, int flags)
		@@@ struct _node* PyParser_SimpleParseFile(  FILE *fp, const char *filename, int start)
		struct _node* PyParser_SimpleParseFileFlags(  FILE *fp, const char *filename, int start, int flags)
		@@@ PyObject* Py_CompileString(  const char *str, const char *filename, int start)
		PyObject* Py_CompileStringFlags(  const char *str, const char *filename, int start, PyCompilerFlags *flags)
Contagem de referências
	void Py_INCREF(  PyObject *o)
	@@~ void Py_XINCREF(  PyObject *o)
	void Py_DECREF(  PyObject *o)
	@@~ void Py_XDECREF(  PyObject *o)
	void Py_CLEAR(  PyObject *o)
Tratamento de exceções
	Tratar exceções
		void PyErr_Print(  )
		PyObject* PyErr_Occurred(  )
		@@@ int PyErr_ExceptionMatches(  PyObject *exc)
		int PyErr_GivenExceptionMatches(  PyObject *given, PyObject *exc)
		void PyErr_Fetch(  PyObject **ptype, PyObject **pvalue, PyObject **ptraceback)
		void PyErr_Restore(  PyObject *type, PyObject *value, PyObject *traceback)
		void PyErr_NormalizeException(  PyObject**exc, PyObject**val, PyObject**tb)
		void PyErr_Clear(  )
	Sinalizar exceções
		void PyErr_SetString(  PyObject *type, char *message)
		PyObject* PyErr_Format(  PyObject *exception, const char *format, ...)
		void PyErr_SetObject(  PyObject *type, PyObject *value)
		@@@ void PyErr_SetNone(  PyObject *type)
		@@@ int PyErr_BadArgument(  )
		@@@ PyObject* PyErr_NoMemory(  )
		@@@ void PyErr_BadInternalCall(  )
		@@~ int PyErr_Warn(  PyObject *category, char *message)
		int PyErr_WarnExplicit(  PyObject *category, char *message, char *filename, int lineno, char *module, PyObject *registry)
		@@@ PyObject* PyErr_SetFromErrno(  PyObject *type)
		PyObject* PyErr_SetFromErrnoWithFilename(  PyObject *type, char *filename)
		int PyErr_CheckSignals(  )
		void PyErr_SetInterrupt(  )
		@@@ PyObject* PyErr_NewException(  char *name, PyObject *base, PyObject *dict)
		void PyErr_WriteUnraisable(  PyObject *obj)
	Sinalizar exceções (Windows)
		@@~ PyObject* PyErr_SetFromWindowsErr(  int ierr)
		@@~ PyObject* PyErr_SetExcFromWindowsErr(  PyObject *type, int ierr)
		@@~ PyObject* PyErr_SetFromWindowsErrWithFilename(  int ierr, char *filename)
		PyObject* PyErr_SetExcFromWindowsErrWithFilename(  PyObject *type, int ierr, char *filename)
Execução
	Inicialização
		@@~ void Py_Initialize(  )
		void Py_InitializeEx(  int initsigs)
		int Py_IsInitialized(  )
	Finalização
		void Py_Finalize(  )
		void Py_FatalError(  const char *message)
		void Py_Exit(  int status)
		int Py_AtExit(  void (*func) ())
	Threads
		Inicialização
			PyThreadState* Py_NewInterpreter(  )
			void PyEval_InitThreads(  )
			int PyEval_ThreadsInitialized(  )
		Finalização
			void Py_EndInterpreter(  PyThreadState *tstate)
		Lock global
			void PyEval_AcquireLock(  )
			void PyEval_AcquireThread(  PyThreadState *tstate)
			void PyEval_ReleaseLock(  )
			void PyEval_ReleaseThread(  PyThreadState *tstate)
			PyThreadState* PyEval_SaveThread(  )
			void PyEval_RestoreThread(  PyThreadState *tstate)
			@@@ Py_BEGIN_ALLOW_THREADS
			@@@ Py_END_ALLOW_THREADS
			@@@ Py_BLOCK_THREADS
			@@@ Py_UNBLOCK_THREADS
			PyGILState_STATE PyGILState_Ensure(  )
			void PyGILState_Release(  PyGILState_STATE)
		Controle do estado do interpretador
			Misc.
				PyInterpreterState* PyInterpreterState_New(  )
				void PyInterpreterState_Clear(  PyInterpreterState *interp)
				void PyInterpreterState_Delete(  PyInterpreterState *interp)
			API para debuggers
				PyInterpreterState* PyInterpreterState_Head(  )
				PyInterpreterState* PyInterpreterState_Next(  PyInterpreterState *interp)
				PyThreadState * PyInterpreterState_ThreadHead(  PyInterpreterState *interp)
				PyThreadState* PyThreadState_Next(  PyThreadState *tstate)
		Controle do estado de thread
			PyThreadState* PyThreadState_New(  PyInterpreterState *interp)
			void PyThreadState_Clear(  PyThreadState *tstate)
			void PyThreadState_Delete(  PyThreadState *tstate)
			PyThreadState* PyThreadState_Get(  )
			PyThreadState* PyThreadState_Swap(  PyThreadState *tstate)
			PyObject* PyThreadState_GetDict(  )
			int PyThreadState_SetAsyncExc(  long id, PyObject *exc)
	Caminhos
		void Py_SetProgramName(  char *name)
		char* Py_GetProgramName(  )
		char* Py_GetPrefix(  )
		char* Py_GetExecPrefix(  )
		char* Py_GetProgramFullPath(  )
		char* Py_GetPath(  )
	Sistema
		@@n const char* Py_GetVersion(  )
		@@n const char* Py_GetPlatform(  )
		@@n const char* Py_GetCopyright(  )
		@@n const char* Py_GetCompiler(  )
		@@n const char* Py_GetBuildInfo(  )
		@@~ int PySys_SetArgv(  int argc, char **argv)
	Profiling
		void PyEval_SetProfile(  Py_tracefunc func, PyObject *obj)
		void PyEval_SetTrace(  Py_tracefunc func, PyObject *obj)
Importar módulos
	@@@ PyObject* PyImport_ImportModule(  char *name)
	PyObject* PyImport_ImportModuleEx(  char *name, PyObject *globals, PyObject *locals, PyObject *fromlist)
	PyObject* PyImport_Import(  PyObject *name)
	PyObject* PyImport_ReloadModule(  PyObject *m)
	PyObject* PyImport_AddModule(  char *name)
	PyObject* PyImport_ExecCodeModule(  char *name, PyObject *co)
	long PyImport_GetMagicNumber(  )
	PyObject* PyImport_GetModuleDict(  )
	%%% void _PyImport_Init(  )
	%%% void PyImport_Cleanup(  )
	%%% void _PyImport_Fini(  )
	%%% PyObject* _PyImport_FindExtension(  char *, char *)
	%%% PyObject* _PyImport_FixupExtension(  char *, char *)
	int PyImport_ImportFrozenModule(  char *name)
	@@~ int PyImport_AppendInittab(  char *name, void (*initfunc)(void))
	int PyImport_ExtendInittab(  struct _inittab *newtab)
Serialização de dados
	void PyMarshal_WriteLongToFile(  long value, FILE *file, int version)
	@@~ void PyMarshal_WriteObjectToFile(  PyObject *value, FILE *file, int version)
	PyObject* PyMarshal_WriteObjectToString(  PyObject *value, int version)
	long PyMarshal_ReadLongFromFile(  FILE *file)
	int PyMarshal_ReadShortFromFile(  FILE *file)
	@@~ PyObject* PyMarshal_ReadObjectFromFile(  FILE *file)
	PyObject* PyMarshal_ReadLastObjectFromFile(  FILE *file)
	PyObject* PyMarshal_ReadObjectFromString(  char *string, int len)
Tipos de dados
	Chamadas
		PyObject* PyObject_Call(  PyObject *callable_object, PyObject *args, PyObject *kw)
		@@~ PyObject* PyObject_CallObject(  PyObject *callable_object, PyObject *args)
		@@~ PyObject* PyObject_CallFunction(  PyObject *callable, char *format, ...)
		@@~ PyObject* PyObject_CallMethod(  PyObject *o, char *method, char *format, ...)
		@@~ PyObject* PyObject_CallFunctionObjArgs(  PyObject *callable, ..., NULL)
		@@~ PyObject* PyObject_CallMethodObjArgs(  PyObject *o, PyObject *name, ..., NULL)
	Verificação de tipo
		int PyObject_IsInstance(  PyObject *inst, PyObject *cls)
		int PyObject_IsSubclass(  PyObject *derived, PyObject *cls)
		int PyObject_TypeCheck(  PyObject *o, PyTypeObject *type)
		@@n PyObject* PyObject_Type(  PyObject *o)
		@@~ int PyCallable_Check(  PyObject *o)
		@@~ int PyNumber_Check(  PyObject *o)
		@@~ int PySequence_Check(  PyObject *o)
		@@~ int PyMapping_Check(  PyObject *o)
		@@~ int PyBool_Check(  PyObject *o)
		@@~ int PyInt_Check(  PyObject *o)
		@@~ int PyInt_CheckExact(  PyObject *o)
		@@~ int PyLong_Check(  PyObject *p)
		@@~ int PyLong_CheckExact(  PyObject *p)
		@@~ int PyFloat_Check(  PyObject *p)
		@@~ int PyFloat_CheckExact(  PyObject *p)
		@@~ int PyComplex_Check(  PyObject *p)
		@@~ int PyComplex_CheckExact(  PyObject *p)
		@@~ int PyString_Check(  PyObject *o)
		@@~ int PyString_CheckExact(  PyObject *o)
		@@~ int PyIter_Check(  PyObject *o)
		@@~ int PyType_Check(  PyObject *o)
		@@~ int PyType_CheckExact(  PyObject *o)
		@@~ int PyUnicode_Check(  PyObject *o)
		@@~ int PyUnicode_CheckExact(  PyObject *o)
		@@~ int PyBuffer_Check(  PyObject *p)
		@@~ int PyTuple_Check(  PyObject *p)
		@@~ int PyTuple_CheckExact(  PyObject *p)
		@@~ int PyList_Check(  PyObject *p)
		@@~ int PyList_CheckExact(  PyObject *p)
		@@~ int PyDict_Check(  PyObject *p)
		@@~ int PyDict_CheckExact(  PyObject *p)
		@@~ int PyFile_Check(  PyObject *p)
		@@~ int PyFile_CheckExact(  PyObject *p)
		@@~ int PyInstance_Check(  PyObject *obj)
		@@~ int PyModule_Check(  PyObject *p)
		@@~ int PyModule_CheckExact(  PyObject *p)
		@@~ int PySeqIter_Check(  op)
		@@~ int PyCallIter_Check(  op)
		@@~ int PySlice_Check(  PyObject *ob)
		@@~ int PyWeakref_Check(  ob)
		int PyWeakref_CheckRef(  ob)
		int PyWeakref_CheckProxy(  ob)
		@@~ int PyCObject_Check(  PyObject *p)
		@@~ int PyCell_Check(  ob)
		@@~ int PyGen_Check(  ob)
		@@~ int PyGen_CheckExact(  ob)
		@@~ int PyDate_Check(  PyObject *ob)
		@@~ int PyDate_CheckExact(  PyObject *ob)
		@@~ int PyDateTime_Check(  PyObject *ob)
		@@~ int PyDateTime_CheckExact(  PyObject *ob)
		@@~ int PyTime_Check(  PyObject *ob)
		@@~ int PyTime_CheckExact(  PyObject *ob)
		@@~ int PyDelta_Check(  PyObject *ob)
		@@~ int PyDelta_CheckExact(  PyObject *ob)
		@@~ int PyTZInfo_Check(  PyObject *ob)
		@@~ int PyTZInfo_CheckExact(  PyObject *ob)
	Criação de objetos
		Via C
			@@~ PyObject* _PyObject_New(  PyTypeObject *type)
			PyVarObject* _PyObject_NewVar(  PyTypeObject *type, int size)
			@@~ PyObject* PyObject_Init(  PyObject *op, PyTypeObject *type)
			PyVarObject* PyObject_InitVar(  PyVarObject *op, PyTypeObject *type, int size)
			@@~ TYPE* PyObject_New(  TYPE, PyTypeObject *type)
			TYPE* PyObject_NewVar(  TYPE, PyTypeObject *type, int size)
			@@@ TYPE* PyObject_NEW(  TYPE, PyTypeObject *type)
			@@@ TYPE* PyObject_NEW_VAR(  TYPE, PyTypeObject *type, int size)
			@@~ PyObject* Py_InitModule(  char *name, PyMethodDef *methods)
			PyObject* Py_InitModule3(  char *name, PyMethodDef *methods, char *doc)
			PyObject* Py_InitModule4(  char *name, PyMethodDef *methods, char *doc, PyObject *self, int apiver)
		Via Python
			PyObject* PyInstance_New(  PyObject *class, PyObject *arg, PyObject *kw)
			PyObject* PyInstance_NewRaw(  PyObject *class, PyObject *dict)
			@@~ PyObject* PyBuffer_New(  int size)
			@@~ PyObject* PyTuple_New(  int len)
			@@~ PyObject* PyTuple_Pack(  int n, ...)
			@@~ PyObject* PyList_New(  int len)
			@@~ PyObject* PyDict_New(  )
			@@~ PyObject* PyDictProxy_New(  PyObject *dict)
			@@~ PyObject* PyDict_Copy(  PyObject *p)
			@@~ PyObject* PyFile_FromString(  char *filename, char *mode)
			@@~ PyObject* PyMethod_New(  PyObject *func. PyObject *self, PyObject *class)
			@@~ PyObject* PyModule_New(  char *name)
			@@~ PyObject* PySeqIter_New(  PyObject *seq)
			@@~ PyObject* PyCallIter_New(  PyObject *callable, PyObject *sentinel)
			@@~ PyObject* PySlice_New(  PyObject *start, PyObject *stop, PyObject *step)
			PyObject* PyWeakref_NewRef(  PyObject *ob, PyObject *callback)
			PyObject* PyWeakref_NewProxy(  PyObject *ob, PyObject *callback)
			@@~ PyObject* PyCell_New(  PyObject *ob)
			@@~ PyObject* PyGen_New(  PyFrameObject *frame)
	Destruição de objetos
		void PyObject_Del(  PyObject *op)
		@@@ void PyObject_DEL(  PyObject *op)
	Tamanho
		@@n int PyObject_Length(  PyObject *o)
		@@@ int PyObject_Size(  PyObject *o)
		@@@ int PySequence_Size(  PyObject *o)
		@@@ int PySequence_Length(  PyObject *o)
		@@~ int PySequence_Fast_GET_SIZE(  PyObject *o)
		@@@ int PyMapping_Length(  PyObject *o)
		@@@ int PyString_Size(  PyObject *string)
		@@~ int PyString_GET_SIZE(  PyObject *string)
		@@@ int PyUnicode_GetSize(  PyObject *unicode)
		@@~ int PyUnicode_GET_SIZE(  PyObject *o)
		@@@ int PyTuple_Size(  PyObject *p)
		@@~ int PyTuple_GET_SIZE(  PyObject *p)
		@@@ int PyList_Size(  PyObject *list)
		@@~ int PyList_GET_SIZE(  PyObject *list)
		@@@ int PyDict_Size(  PyObject *p)
	Conversão de objetos
		C para Python
			PyObject* PyString_FromStringAndSize(  const char *v, int len)
			@@@ PyObject* PyString_FromString(  const char *v)
			@@~ PyObject* PyString_FromFormat(  const char *format, ...)
			@@~ PyObject* PyString_FromFormatV(  const char *format, va_list vargs)
			PyObject* PyInt_FromLong(  long ival)
			@@~ PyObject* PyInt_FromString(  char *str, char **pend, int base)
			PyObject* PyFloat_FromDouble(  double v)
			@@~PyObject* PyFloat_FromString(  PyObject *str, char **pend)
			PyObject* PyComplex_FromCComplex(  Py_complex v)
			PyObject* PyComplex_FromDoubles(  double real, double imag)
			PyObject* PyBool_FromLong(  long v)
			PyObject* PyLong_FromLong(  long v)
			PyObject* PyLong_FromUnsignedLong(  unsigned long v)
			PyObject* PyLong_FromLongLong(  long long v)
			PyObject* PyLong_FromUnsignedLongLong(  unsigned long long v)
			PyObject* PyLong_FromDouble(  double v)
			@@~ PyObject* PyLong_FromString(  char *str, char **pend, int base)
			PyObject* PyLong_FromUnicode(  Py_UNICODE *u, int length, int base)
			@@~ PyObject* PyLong_FromVoidPtr(  void *p)
			PyObject* PyUnicode_FromUnicode(  const Py_UNICODE *u, int size)
			PyObject* PyUnicode_FromEncodedObject(  PyObject *obj, const char *encoding, const char *errors)
			@@@ PyObject* PyUnicode_FromObject(  PyObject *obj)
			PyObject* PyUnicode_FromWideChar(  const wchar_t *w, int size)
			PyObject* PyBuffer_FromMemory(  void *ptr, int size)
			PyObject* PyBuffer_FromReadWriteMemory(  void *ptr, int size)
			PyObject* PyFile_FromFile(  FILE *fp, char *name, char *mode, int (*close)(FILE*))
			PyObject* PyCObject_FromVoidPtr(  void* cobj, void (*destr)(void *))
			PyObject* PyCObject_FromVoidPtrAndDesc(  void* cobj, void* desc, void (*destr)(void *, void *))
			PyObject* PyDate_FromDate(  int year, int month, int day)
			PyObject* PyDateTime_FromDateAndTime(  int year, int month, int day, int hour, int minute, int second, int usecond)
			PyObject* PyTime_FromTime(  int hour, int minute, int second, int usecond)
			PyObject* PyDelta_FromDSU(  int days, int seconds, int useconds)
		Python para C
			int PyString_AsStringAndSize(  PyObject *obj, char **buffer, int *length)
			@@@ char* PyString_AsString(  PyObject *string)
			@@~ char* PyString_AS_STRING(  PyObject *string)
			long PyInt_AsLong(  PyObject *io)
			@@~ long PyInt_AS_LONG(  PyObject *io)
			unsigned long PyInt_AsUnsignedLongMask(  PyObject *io)
			unsigned long long PyInt_AsUnsignedLongLongMask(  PyObject *io)
			double PyFloat_AsDouble(  PyObject *pyfloat)
			@@~ double PyFloat_AS_DOUBLE(  PyObject *pyfloat)
			double PyComplex_RealAsDouble(  PyObject *op)
			double PyComplex_ImagAsDouble(  PyObject *op)
			Py_complex PyComplex_AsCComplex(  PyObject *op)
			long PyLong_AsLong(  PyObject *pylong)
			unsigned long PyLong_AsUnsignedLong(  PyObject *pylong)
			long long PyLong_AsLongLong(  PyObject *pylong)
			unsigned long long PyLong_AsUnsignedLongLong(  PyObject *pylong)
			unsigned long PyLong_AsUnsignedLongMask(  PyObject *io)
			unsigned long PyLong_AsUnsignedLongLongMask(  PyObject *io)
			double PyLong_AsDouble(  PyObject *pylong)
			@@~ void* PyLong_AsVoidPtr(  PyObject *pylong)
			Py_UNICODE* PyUnicode_AsUnicode(  PyObject *unicode)
			@@~ Py_UNICODE* PyUnicode_AS_UNICODE(  PyObject *o)
			const char* PyUnicode_AS_DATA(  PyObject *o)
			int PyUnicode_AsWideChar(  PyUnicodeObject *unicode, wchar_t *w, int size)
			FILE* PyFile_AsFile(  PyFileObject *p)
			void* PyCObject_AsVoidPtr(  PyObject* self)
			int PyDateTime_GET_YEAR(  PyDateTime_Date *o)
			int PyDateTime_GET_MONTH(  PyDateTime_Date *o)
			int PyDateTime_GET_DAY(  PyDateTime_Date *o)
			int PyDateTime_DATE_GET_HOUR(  PyDateTime_DateTime *o)
			int PyDateTime_DATE_GET_MINUTE(  PyDateTime_DateTime *o)
			int PyDateTime_DATE_GET_SECOND(  PyDateTime_DateTime *o)
			int PyDateTime_DATE_GET_MICROSECOND(  PyDateTime_DateTime *o)
			int PyDateTime_TIME_GET_HOUR(  PyDateTime_Time *o)
			int PyDateTime_TIME_GET_MINUTE(  PyDateTime_Time *o)
			int PyDateTime_TIME_GET_SECOND(  PyDateTime_Time *o)
			int PyDateTime_TIME_GET_MICROSECOND(  PyDateTime_Time *o)
		Em Python
			@@n PyObject* PyObject_Repr(  PyObject *o)
			@@n PyObject* PyObject_Str(  PyObject *o)
			@@n PyObject* PyObject_Unicode(  PyObject *o)
			@@n PyObject* PyNumber_Int(  PyObject *o)
			@@n PyObject* PyNumber_Long(  PyObject *o)
			@@n PyObject* PyNumber_Float(  PyObject *o)
			@@n PyObject* PyString_AsDecodedObject(  PyObject *str, const char *encoding, const char *errors)
			@@n PyObject* PyString_AsEncodedObject(  PyObject *str, const char *encoding, const char *errors)
			@@n PyObject* PyUnicode_AsEncodedString(  PyObject *unicode, const char *encoding, const char *errors)
			@@n PyObject* PyUnicode_AsUTF8String(  PyObject *unicode)
			@@n PyObject* PyUnicode_AsUTF16String(  PyObject *unicode)
			@@n PyObject* PyUnicode_AsUnicodeEscapeString(  PyObject *unicode)
			@@n PyObject* PyUnicode_AsRawUnicodeEscapeString(  PyObject *unicode)
			@@n PyObject* PyUnicode_AsLatin1String(  PyObject *unicode)
			@@n PyObject* PyUnicode_AsASCIIString(  PyObject *unicode)
			@@n PyObject* PyUnicode_AsCharmapString(  PyObject *unicode, PyObject *mapping)
			@@n PyObject* PyUnicode_AsMBCSString(  PyObject *unicode)
			@@n PyObject* PyList_AsTuple(  PyObject *list)
			@@n PyObject* PyBuffer_FromObject(  PyObject *base, int offset, int size)
			@@n PyObject* PyBuffer_FromReadWriteObject(  PyObject *base, int offset, int size)
			PyObject* PyWeakref_GetObject(  PyObject *ref)
			@@~ PyObject* PyWeakref_GET_OBJECT(  PyObject *ref)
			PyObject* PyDateTime_FromTimestamp(  PyObject *args)
			PyObject* PyDate_FromTimestamp(  PyObject *args)
	Operações sobre índices
		Get
			PyObject* PyObject_GetItem(  PyObject *o, PyObject *key)
			@@~ PyObject* PySequence_GetItem(  PyObject *o, int i)
			@@~ PyObject* PySequence_ITEM(  PyObject *o, int i)
			@@~ PyObject* PySequence_Fast_GET_ITEM(  PyObject *o, int i)
			@@~ PyObject* PyMapping_GetItemString(  PyObject *o, char *key)
			@@~ PyObject* PyTuple_GetItem(  PyObject *p, int pos)
			@@~ PyObject* PyTuple_GET_ITEM(  PyObject *p, int pos)
			@@~ PyObject* PyList_GetItem(  PyObject *list, int index)
			@@~ PyObject* PyList_GET_ITEM(  PyObject *list, int i)
			@@~ PyObject* PyDict_GetItem(  PyObject *p, PyObject *key)
			@@~ PyObject* PyDict_GetItemString(  PyObject *p, char *key)
		Set
			int PyObject_SetItem(  PyObject *o, PyObject *key, PyObject *v)
			@@~ int PySequence_SetItem(  PyObject *o, int i, PyObject *v)
			@@~ int PyMapping_SetItemString(  PyObject *o, char *key, PyObject *v)
			@@~ int PyTuple_SetItem(  PyObject *p, int pos, PyObject *o)
			@@~ void PyTuple_SET_ITEM(  PyObject *p, int pos, PyObject *o)
			@@~ int PyList_SetItem(  PyObject *list, int index, PyObject *item)
			@@~ void PyList_SET_ITEM(  PyObject *list, int i, PyObject *o)
			@@~ int PyDict_SetItem(  PyObject *p, PyObject *key, PyObject *val)
			@@~ int PyDict_SetItemString(  PyObject *p, char *key, PyObject *val)
		Del
			int PyObject_DelItem(  PyObject *o, PyObject *key)
			@@~ int PySequence_DelItem(  PyObject *o, int i)
			@@~ int PyMapping_DelItemString(  PyObject *o, char *key)
			@@~ int PyMapping_DelItem(  PyObject *o, PyObject *key)
			@@~ int PyDict_DelItem(  PyObject *p, PyObject *key)
			@@~ int PyDict_DelItemString(  PyObject *p, char *key)
		Slices
			PyObject* PySequence_GetSlice(  PyObject *o, int i1, int i2)
			int PySequence_SetSlice(  PyObject *o, int i1, int i2, PyObject *v)
			int PySequence_DelSlice(  PyObject *o, int i1, int i2)
			PyObject* PyTuple_GetSlice(  PyObject *p, int low, int high)
			@@@ PyObject* PyList_GetSlice(  PyObject *list, int low, int high)
			@@@ int PyList_SetSlice(  PyObject *list, int low, int high, PyObject *itemlist)
			int PySlice_GetIndicesEx(  PySliceObject *slice, int length, int *start, int *stop, int *step, int *slicelength)
			@@~int PySlice_GetIndices(  PySliceObject *slice, int length, int *start, int *stop, int *step)
	Listas
		@@n int PyList_Insert(  PyObject *list, int index, PyObject *item)
		@@n int PyList_Append(  PyObject *list, PyObject *item)
		@@n int PyList_Sort(  PyObject *list)
		@@n int PyList_Reverse(  PyObject *list)
	Comparação 
		@@n int PyObject_Compare(  PyObject *o1, PyObject *o2)
		@@@ int PyObject_Cmp(  PyObject *o1, PyObject *o2, int *result)
		PyObject* PyObject_RichCompare(  PyObject *o1, PyObject *o2, int opid)
		@@@ int PyObject_RichCompareBool(  PyObject *o1, PyObject *o2, int opid)
		@@@ int PyUnicode_Compare(  PyObject *left, PyObject *right)
	"Contém"
		int PySequence_Contains(  PyObject *o, PyObject *value)
		int PyUnicode_Contains(  PyObject *container, PyObject *element)
		int PyDict_Contains(  PyObject *p, PyObject *key)
	Operações genéricas sobre objetos
		int PyObject_Print(  PyObject *o, FILE *fp, int flags)
		@@n int PyObject_Hash(  PyObject *o)
		int PyObject_IsTrue(  PyObject *o)
		int PyObject_Not(  PyObject *o)
		int PyObject_AsFileDescriptor(  PyObject *o)
		@@n PyObject* PyObject_Dir(  PyObject *o)
	Atributos
		@@n int PyObject_HasAttr(  PyObject *o, PyObject *attr_name)
		@@@ int PyObject_HasAttrString(  PyObject *o, char *attr_name)
		PyObject* PyObject_GetAttr(  PyObject *o, PyObject *attr_name)
		@@@ PyObject* PyObject_GetAttrString(  PyObject *o, char *attr_name)
		int PyObject_SetAttr(  PyObject *o, PyObject *attr_name, PyObject *v)
		@@@ int PyObject_SetAttrString(  PyObject *o, char *attr_name, PyObject *v)
		int PyObject_DelAttr(  PyObject *o, PyObject *attr_name)
		@@@ int PyObject_DelAttrString(  PyObject *o, char *attr_name)
	Operações sobre números
		PyObject* PyNumber_Add(  PyObject *o1, PyObject *o2)
		PyObject* PyNumber_Subtract(  PyObject *o1, PyObject *o2)
		PyObject* PyNumber_Multiply(  PyObject *o1, PyObject *o2)
		PyObject* PyNumber_Divide(  PyObject *o1, PyObject *o2)
		PyObject* PyNumber_FloorDivide(  PyObject *o1, PyObject *o2)
		PyObject* PyNumber_TrueDivide(  PyObject *o1, PyObject *o2)
		PyObject* PyNumber_Remainder(  PyObject *o1, PyObject *o2)
		@@n PyObject* PyNumber_Divmod(  PyObject *o1, PyObject *o2)
		@@n PyObject* PyNumber_Power(  PyObject *o1, PyObject *o2, PyObject *o3)
		PyObject* PyNumber_Negative(  PyObject *o)
		PyObject* PyNumber_Positive(  PyObject *o)
		@@n PyObject* PyNumber_Absolute(  PyObject *o)
		PyObject* PyNumber_Invert(  PyObject *o)
		PyObject* PyNumber_Lshift(  PyObject *o1, PyObject *o2)
		PyObject* PyNumber_Rshift(  PyObject *o1, PyObject *o2)
		PyObject* PyNumber_And(  PyObject *o1, PyObject *o2)
		PyObject* PyNumber_Xor(  PyObject *o1, PyObject *o2)
		PyObject* PyNumber_Or(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceAdd(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceSubtract(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceMultiply(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceDivide(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceFloorDivide(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceTrueDivide(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceRemainder(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlacePower(  PyObject *o1, PyObject *o2, PyObject *o3)
		@@@? PyObject* PyNumber_InPlaceLshift(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceRshift(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceAnd(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceXor(  PyObject *o1, PyObject *o2)
		@@@? PyObject* PyNumber_InPlaceOr(  PyObject *o1, PyObject *o2)
		int PyNumber_Coerce(  PyObject **p1, PyObject **p2)
	Redimensionamento
		int _PyString_Resize(  PyObject **string, int newsize)
		int _PyTuple_Resize(  PyObject **p, int newsize)
	Seqüências
		Concatenação
			PyObject* PySequence_Concat(  PyObject *o1, PyObject *o2)
			@@@ void PyString_Concat(  PyObject **string, PyObject *newpart)
			@@~ void PyString_ConcatAndDel(  PyObject **string, PyObject *newpart)
			@@@? PyObject* PySequence_InPlaceConcat(  PyObject *o1, PyObject *o2)
			@@@ PyObject* PyUnicode_Concat(  PyObject *left, PyObject *right)
		Repetição
			PyObject* PySequence_Repeat(  PyObject *o, int count)
			@@@? PyObject* PySequence_InPlaceRepeat(  PyObject *o, int count)
		Misc.
			@@n int PySequence_Count(  PyObject *o, PyObject *value)
			@@n int PySequence_Index(  PyObject *o, PyObject *value)
			PyObject* PySequence_List(  PyObject *o)
			@@n? PyObject* PySequence_Tuple(  PyObject *o)
			@@~ PyObject* PySequence_Fast(  PyObject *o, const char *m)
			@@~ PyObject** PySequence_Fast_ITEMS(  PyObject *o)
	Strings
		Codificação
			Codificação
				PyObject* PyString_Encode(  const char *s, int size, const char *encoding, const char *errors)
				PyObject* PyUnicode_Encode(  const Py_UNICODE *s, int size, const char *encoding, const char *errors)
				@@@ PyObject* PyUnicode_EncodeUTF8(  const Py_UNICODE *s, int size, const char *errors)
				@@@ PyObject* PyUnicode_EncodeUTF16(  const Py_UNICODE *s, int size, const char *errors, int byteorder)
				@@@ PyObject* PyUnicode_EncodeUnicodeEscape(  const Py_UNICODE *s, int size, const char *errors)
				@@@ PyObject* PyUnicode_EncodeRawUnicodeEscape(  const Py_UNICODE *s, int size, const char *errors)
				@@@ PyObject* PyUnicode_EncodeLatin1(  const Py_UNICODE *s, int size, const char *errors)
				@@@ PyObject* PyUnicode_EncodeASCII(  const Py_UNICODE *s, int size, const char *errors)
				@@@ PyObject* PyUnicode_EncodeMBCS(  const Py_UNICODE *s, int size, const char *errors)
				PyObject* PyUnicode_EncodeCharmap(  const Py_UNICODE *s, int size, PyObject *mapping, const char *errors)
			Decodificação
				PyObject* PyString_Decode(  const char *s, int size, const char *encoding, const char *errors)
				PyObject* PyUnicode_Decode(  const char *s, int size, const char *encoding, const char *errors)
				@@@ PyObject* PyUnicode_DecodeUTF8(  const char *s, int size, const char *errors)
				@@@ PyObject* PyUnicode_DecodeUTF8Stateful(  const char *s, int size, const char *errors, int *consumed)
				@@@ PyObject* PyUnicode_DecodeUTF16(  const char *s, int size, const char *errors, int *byteorder)
				@@@ PyObject* PyUnicode_DecodeUTF16Stateful(  const char *s, int size, const char *errors, int *byteorder, int *consumed)
				@@@ PyObject* PyUnicode_DecodeUnicodeEscape(  const char *s, int size, const char *errors)
				@@@ PyObject* PyUnicode_DecodeRawUnicodeEscape(  const char *s, int size, const char *errors)
				@@@ PyObject* PyUnicode_DecodeLatin1(  const char *s, int size, const char *errors)
				@@@ PyObject* PyUnicode_DecodeASCII(  const char *s, int size, const char *errors)
				@@@ PyObject* PyUnicode_DecodeMBCS(  const char *s, int size, const char *errors)
				PyObject* PyUnicode_DecodeCharmap(  const char *s, int size, PyObject *mapping, const char *errors)
			Tradução
				PyObject* PyUnicode_TranslateCharmap(  const Py_UNICODE *s, int size, PyObject *table, const char *errors)
		Misc.
			PyObject* PyString_Format(  PyObject *format, PyObject *args)
			void PyString_InternInPlace(  PyObject **string)
			@@@ PyObject* PyString_InternFromString(  const char *v)
		Unicode
			int PyUnicode_GET_DATA_SIZE(  PyObject *o)
			int Py_UNICODE_ISSPACE(  Py_UNICODE ch)
			int Py_UNICODE_ISLOWER(  Py_UNICODE ch)
			int Py_UNICODE_ISUPPER(  Py_UNICODE ch)
			int Py_UNICODE_ISTITLE(  Py_UNICODE ch)
			int Py_UNICODE_ISLINEBREAK(  Py_UNICODE ch)
			int Py_UNICODE_ISDECIMAL(  Py_UNICODE ch)
			int Py_UNICODE_ISDIGIT(  Py_UNICODE ch)
			int Py_UNICODE_ISNUMERIC(  Py_UNICODE ch)
			int Py_UNICODE_ISALPHA(  Py_UNICODE ch)
			int Py_UNICODE_ISALNUM(  Py_UNICODE ch)
			Py_UNICODE Py_UNICODE_TOLOWER(  Py_UNICODE ch)
			Py_UNICODE Py_UNICODE_TOUPPER(  Py_UNICODE ch)
			Py_UNICODE Py_UNICODE_TOTITLE(  Py_UNICODE ch)
			int Py_UNICODE_TODECIMAL(  Py_UNICODE ch)
			int Py_UNICODE_TODIGIT(  Py_UNICODE ch)
			double Py_UNICODE_TONUMERIC(  Py_UNICODE ch)
			PyObject* PyUnicode_Split(  PyObject *s, PyObject *sep, int maxsplit)
			PyObject* PyUnicode_Splitlines(  PyObject *s, int keepend)
			PyObject* PyUnicode_Translate(  PyObject *str, PyObject *table, const char *errors)
			PyObject* PyUnicode_Join(  PyObject *separator, PyObject *seq)
			int PyUnicode_Tailmatch(  PyObject *str, PyObject *substr, int start, int end, int direction)
			int PyUnicode_Find(  PyObject *str, PyObject *substr, int start, int end, int direction)
			int PyUnicode_Count(  PyObject *str, PyObject *substr, int start, int end)
			PyObject* PyUnicode_Replace(  PyObject *str, PyObject *substr, PyObject *replstr, int maxcount)
			PyObject* PyUnicode_Format(  PyObject *format, PyObject *args)
	Mapas
		Chaves
			@@n PyObject* PyMapping_Keys(  PyObject *o)
			@@~ PyObject* PyDict_Keys(  PyObject *p)
		Valores
			@@n PyObject* PyMapping_Values(  PyObject *o)
			@@~ PyObject* PyDict_Values(  PyObject *p)
		Itens
			@@n PyObject* PyMapping_Items(  PyObject *o)
			@@~ PyObject* PyDict_Items(  PyObject *p)
		Misc.
			@@~ int PyMapping_HasKeyString(  PyObject *o, char *key)
			@@n int PyMapping_HasKey(  PyObject *o, PyObject *key)
			void PyDict_Clear(  PyObject *p)
			int PyDict_Merge(  PyObject *a, PyObject *b, int override)
			@@n int PyDict_Update(  PyObject *a, PyObject *b)
			@@~ int PyDict_MergeFromSeq2(  PyObject *a, PyObject *seq2, int override)
	Iteradores
		@@n PyObject* PyObject_GetIter(  PyObject *o)
		@@~ PyObject* PyIter_Next(  PyObject *o)
		@@~ int PyDict_Next(  PyObject *p, int *ppos, PyObject **pkey, PyObject **pvalue)
	Buffers de caracteres
		int PyObject_AsCharBuffer(  PyObject *obj, const char **buffer, int *buffer_len)
		int PyObject_AsReadBuffer(  PyObject *obj, const void **buffer, int *buffer_len)
		int PyObject_CheckReadBuffer(  PyObject *o)
		int PyObject_AsWriteBuffer(  PyObject *obj, void **buffer, int *buffer_len)
	Tipos
		int PyType_HasFeature(  PyObject *o, int feature)
		int PyType_IS_GC(  PyObject *o)
		int PyType_IsSubtype(  PyTypeObject *a, PyTypeObject *b)
		PyObject* PyType_GenericAlloc(  PyTypeObject *type, int nitems)
		PyObject* PyType_GenericNew(  PyTypeObject *type, PyObject *args, PyObject *kwds)
		int PyType_Ready(  PyTypeObject *type)
	Números complexos
		Py_complex _Py_c_sum(  Py_complex left, Py_complex right)
		Py_complex _Py_c_diff(  Py_complex left, Py_complex right)
		Py_complex _Py_c_neg(  Py_complex complex)
		Py_complex _Py_c_prod(  Py_complex left, Py_complex right)
		Py_complex _Py_c_quot(  Py_complex dividend, Py_complex divisor)
		Py_complex _Py_c_pow(  Py_complex num, Py_complex exp)
	Inteiros
		long PyInt_GetMax(  )
	Arquivos
		@@n PyObject* PyFile_GetLine(  PyObject *p, int n)
		PyObject* PyFile_Name(  PyObject *p)
		void PyFile_SetBufSize(  PyFileObject *p, int n)
		int PyFile_Encoding(  PyFileObject *p, char *enc)
		%%% int PyFile_SoftSpace(  PyObject *p, int newflag)
		@@n int PyFile_WriteObject(  PyObject *obj, PyFileObject *p, int flags)
		@@~ int PyFile_WriteString(  const char *s, PyFileObject *p)
	Métodos
		PyObject* PyMethod_Class(  PyObject *meth)
		@@~ PyObject* PyMethod_GET_CLASS(  PyObject *meth)
		PyObject* PyMethod_Function(  PyObject *meth)
		@@~ PyObject* PyMethod_GET_FUNCTION(  PyObject *meth)
		PyObject* PyMethod_Self(  PyObject *meth)
		@@~ PyObject* PyMethod_GET_SELF(  PyObject *meth)
		PyObject* Py_FindMethod(  PyMethodDef table[], PyObject *ob, char *name)
	Módulos
		@@~ PyObject* PyModule_GetDict(  PyObject *module)
		@@~ char* PyModule_GetName(  PyObject *module)
		@@~ char* PyModule_GetFilename(  PyObject *module)
		@@~ int PyModule_AddObject(  PyObject *module, char *name, PyObject *value)
		@@~ int PyModule_AddIntConstant(  PyObject *module, char *name, long value)
		@@~ int PyModule_AddStringConstant(  PyObject *module, char *name, char *value)
	Descritores
		PyObject* PyDescr_NewGetSet(  PyTypeObject *type, PyGetSetDef *getset)
		PyObject* PyDescr_NewMember(  PyTypeObject *type, PyMemberDef *meth)
		PyObject* PyDescr_NewMethod(  PyTypeObject *type, PyMethodDef *meth)
		PyObject* PyDescr_NewWrapper(  PyTypeObject *type, struct wrapperbase *wrapper, void *wrapped)
		PyObject* PyDescr_NewClassMethod(  PyTypeObject *type, PyMethodDef *method)
		int PyDescr_IsData(  PyObject *descr)
		PyObject* PyWrapper_New(  PyObject *, PyObject *)
	CObjects
		void* PyCObject_GetDesc(  PyObject* self)
		int PyCObject_SetVoidPtr(  PyObject* self, void* cobj)
	Células
		PyObject* PyCell_Get(  PyObject *cell)
		@@~ PyObject* PyCell_GET(  PyObject *cell)
		int PyCell_Set(  PyObject *cell, PyObject *value)
		@@~ void PyCell_SET(  PyObject *cell, PyObject *value)
Camada de portabilidade
	Interação com o sistema operacional
		int Py_FdIsInteractive(  FILE *fp, char *filename)
		long PyOS_GetLastModificationTime(  char *filename)
		void PyOS_AfterFork(  )
		int PyOS_CheckStack(  )
		PyOS_sighandler_t PyOS_getsig(  int i)
		PyOS_sighandler_t PyOS_setsig(  int i, PyOS_sighandler_t h)
	Alocação de memória
		void* PyMem_Malloc(  size_t n)
		void* PyMem_Realloc(  void *p, size_t n)
		void PyMem_Free(  void *p)
		@@@ TYPE* PyMem_New(  TYPE, size_t n)
		@@@ TYPE* PyMem_Resize(  void *p, TYPE, size_t n)
		@@@ void PyMem_Del(  void *p)
Suporte a coleta de lixo cíclica
	TYPE* PyObject_GC_New(  TYPE, PyTypeObject *type)
	TYPE* PyObject_GC_NewVar(  TYPE, PyTypeObject *type, int size)
	PyVarObject * PyObject_GC_Resize(  PyVarObject *op, int)
	void PyObject_GC_Track(  PyObject *op)
	%%% void _PyObject_GC_TRACK(  PyObject *op)
	void PyObject_GC_Del(  PyObject *op)
	void PyObject_GC_UnTrack(  PyObject *op)
	%%% void _PyObject_GC_UNTRACK(  PyObject *op)
	void Py_VISIT(  PyObject *o)
