extern void PerlIO_define_layer( PerlIO_funcs *tab);
extern PerlIO_funcs *PerlIO_find_layer( const char *name, STRLEN len, int load);
extern PerlIO *PerlIO_push( PerlIO *f, PerlIO_funcs *tab, const char *mode, SV *arg);
extern void PerlIO_pop( PerlIO *f);
extern AV* PerlIO_get_layers( PerlIO *f);
extern void PerlIO_clone( PerlInterpreter *proto, CLONE_PARAMS *param);
extern void PerlIO_init(void);
extern int PerlIO_stdoutf(const char *, ...);
extern int PerlIO_puts(PerlIO *, const char *);
extern PerlIO *PerlIO_open(const char *, const char *);
extern PerlIO *PerlIO_openn( const char *layers, const char *mode, int fd, int imode, int perm, PerlIO *old, int narg, SV **arg);
extern int PerlIO_getc(PerlIO *);
extern int PerlIO_putc(PerlIO *, int);
extern int PerlIO_ungetc(PerlIO *, int);
extern PerlIO *PerlIO_fdopen(int, const char *);
extern PerlIO *PerlIO_importFILE(FILE *, const char *);
extern FILE *PerlIO_exportFILE(PerlIO *, const char *);
extern FILE *PerlIO_findFILE(PerlIO *);
extern void PerlIO_releaseFILE(PerlIO *, FILE *);
extern int PerlIO_printf(PerlIO *, const char *, ...);
extern int PerlIO_sprintf(char *, int, const char *, ...);
extern int PerlIO_vprintf(PerlIO *, const char *, va_list);
extern void PerlIO_rewind(PerlIO *);
extern int PerlIO_has_base(PerlIO *);
extern int PerlIO_has_cntptr(PerlIO *);
extern int PerlIO_fast_gets(PerlIO *);
extern int PerlIO_canset_cnt(PerlIO *);
extern PerlIO *PerlIO_tmpfile(void);
extern int PerlIO_getpos(PerlIO *, SV *);
extern int PerlIO_setpos(PerlIO *, SV *);
extern PerlIO *PerlIO_fdupopen( PerlIO *, CLONE_PARAMS *, int);
extern char *PerlIO_modestr(PerlIO *, char *buf);
extern int PerlIO_isutf8(PerlIO *);
extern int PerlIO_apply_layers( PerlIO *f, const char *mode, const char *names);
extern int PerlIO_binmode( PerlIO *f, int iotype, int omode, const char *names);
extern char *PerlIO_getname(PerlIO *, char *);
extern void PerlIO_destruct(void);
extern int PerlIO_intmode2str(int rawmode, char *mode, int *writing);
extern void PerlIO_cleanup(void);
extern void PerlIO_debug(const char *fmt, ...);
PerlInterpreter* perl_alloc(void);
void perl_construct(PerlInterpreter* interp);
int perl_destruct(PerlInterpreter* interp);
void perl_free(PerlInterpreter* interp);
int perl_run(PerlInterpreter* interp);
int perl_parse(PerlInterpreter* interp, XSINIT_t xsinit, int argc, char** argv, char** env);
char Perl_doing_taint(int argc, char** argv, char** env);
void * Perl_malloc(size_t nbytes);
void * Perl_calloc(size_t elements, size_t size);
void * Perl_realloc(void * where, size_t nbytes);
void Perl_mfree(void * where);
void* Perl_get_context(void);
void Perl_set_context(void *thx);
OP *Perl_ck_anoncode ( OP *o);
OP *Perl_ck_bitop ( OP *o);
OP *Perl_ck_concat ( OP *o);
OP *Perl_ck_defined ( OP *o);
OP *Perl_ck_delete ( OP *o);
OP *Perl_ck_die ( OP *o);
OP *Perl_ck_eof ( OP *o);
OP *Perl_ck_eval ( OP *o);
OP *Perl_ck_exec ( OP *o);
OP *Perl_ck_exists ( OP *o);
OP *Perl_ck_exit ( OP *o);
OP *Perl_ck_ftst ( OP *o);
OP *Perl_ck_fun ( OP *o);
OP *Perl_ck_glob ( OP *o);
OP *Perl_ck_grep ( OP *o);
OP *Perl_ck_index ( OP *o);
OP *Perl_ck_join ( OP *o);
OP *Perl_ck_lengthconst ( OP *o);
OP *Perl_ck_lfun ( OP *o);
OP *Perl_ck_listiob ( OP *o);
OP *Perl_ck_match ( OP *o);
OP *Perl_ck_method ( OP *o);
OP *Perl_ck_null ( OP *o);
OP *Perl_ck_open ( OP *o);
OP *Perl_ck_repeat ( OP *o);
OP *Perl_ck_require ( OP *o);
OP *Perl_ck_return ( OP *o);
OP *Perl_ck_rfun ( OP *o);
OP *Perl_ck_rvconst ( OP *o);
OP *Perl_ck_sassign ( OP *o);
OP *Perl_ck_select ( OP *o);
OP *Perl_ck_shift ( OP *o);
OP *Perl_ck_sort ( OP *o);
OP *Perl_ck_spair ( OP *o);
OP *Perl_ck_split ( OP *o);
OP *Perl_ck_subr ( OP *o);
OP *Perl_ck_substr ( OP *o);
OP *Perl_ck_svconst ( OP *o);
OP *Perl_ck_trunc ( OP *o);
OP *Perl_pp_null (void);
OP *Perl_pp_stub (void);
OP *Perl_pp_scalar (void);
OP *Perl_pp_pushmark (void);
OP *Perl_pp_wantarray (void);
OP *Perl_pp_const (void);
OP *Perl_pp_gvsv (void);
OP *Perl_pp_gv (void);
OP *Perl_pp_gelem (void);
OP *Perl_pp_padsv (void);
OP *Perl_pp_padav (void);
OP *Perl_pp_padhv (void);
OP *Perl_pp_padany (void);
OP *Perl_pp_pushre (void);
OP *Perl_pp_rv2gv (void);
OP *Perl_pp_rv2sv (void);
OP *Perl_pp_av2arylen (void);
OP *Perl_pp_rv2cv (void);
OP *Perl_pp_anoncode (void);
OP *Perl_pp_prototype (void);
OP *Perl_pp_refgen (void);
OP *Perl_pp_srefgen (void);
OP *Perl_pp_ref (void);
OP *Perl_pp_bless (void);
OP *Perl_pp_backtick (void);
OP *Perl_pp_glob (void);
OP *Perl_pp_readline (void);
OP *Perl_pp_rcatline (void);
OP *Perl_pp_regcmaybe (void);
OP *Perl_pp_regcreset (void);
OP *Perl_pp_regcomp (void);
OP *Perl_pp_match (void);
OP *Perl_pp_qr (void);
OP *Perl_pp_subst (void);
OP *Perl_pp_substcont (void);
OP *Perl_pp_trans (void);
OP *Perl_pp_sassign (void);
OP *Perl_pp_aassign (void);
OP *Perl_pp_chop (void);
OP *Perl_pp_schop (void);
OP *Perl_pp_chomp (void);
OP *Perl_pp_schomp (void);
OP *Perl_pp_defined (void);
OP *Perl_pp_undef (void);
OP *Perl_pp_study (void);
OP *Perl_pp_pos (void);
OP *Perl_pp_preinc (void);
OP *Perl_pp_predec (void);
OP *Perl_pp_postinc (void);
OP *Perl_pp_postdec (void);
OP *Perl_pp_pow (void);
OP *Perl_pp_multiply (void);
OP *Perl_pp_i_multiply (void);
OP *Perl_pp_divide (void);
OP *Perl_pp_i_divide (void);
OP *Perl_pp_modulo (void);
OP *Perl_pp_i_modulo (void);
OP *Perl_pp_repeat (void);
OP *Perl_pp_add (void);
OP *Perl_pp_i_add (void);
OP *Perl_pp_subtract (void);
OP *Perl_pp_i_subtract (void);
OP *Perl_pp_concat (void);
OP *Perl_pp_stringify (void);
OP *Perl_pp_left_shift (void);
OP *Perl_pp_right_shift (void);
OP *Perl_pp_lt (void);
OP *Perl_pp_i_lt (void);
OP *Perl_pp_gt (void);
OP *Perl_pp_i_gt (void);
OP *Perl_pp_le (void);
OP *Perl_pp_i_le (void);
OP *Perl_pp_ge (void);
OP *Perl_pp_i_ge (void);
OP *Perl_pp_eq (void);
OP *Perl_pp_i_eq (void);
OP *Perl_pp_ne (void);
OP *Perl_pp_i_ne (void);
OP *Perl_pp_ncmp (void);
OP *Perl_pp_i_ncmp (void);
OP *Perl_pp_slt (void);
OP *Perl_pp_sgt (void);
OP *Perl_pp_sle (void);
OP *Perl_pp_sge (void);
OP *Perl_pp_seq (void);
OP *Perl_pp_sne (void);
OP *Perl_pp_scmp (void);
OP *Perl_pp_bit_and (void);
OP *Perl_pp_bit_xor (void);
OP *Perl_pp_bit_or (void);
OP *Perl_pp_negate (void);
OP *Perl_pp_i_negate (void);
OP *Perl_pp_not (void);
OP *Perl_pp_complement (void);
OP *Perl_pp_atan2 (void);
OP *Perl_pp_sin (void);
OP *Perl_pp_cos (void);
OP *Perl_pp_rand (void);
OP *Perl_pp_srand (void);
OP *Perl_pp_exp (void);
OP *Perl_pp_log (void);
OP *Perl_pp_sqrt (void);
OP *Perl_pp_int (void);
OP *Perl_pp_hex (void);
OP *Perl_pp_oct (void);
OP *Perl_pp_abs (void);
OP *Perl_pp_length (void);
OP *Perl_pp_substr (void);
OP *Perl_pp_vec (void);
OP *Perl_pp_index (void);
OP *Perl_pp_rindex (void);
OP *Perl_pp_sprintf (void);
OP *Perl_pp_formline (void);
OP *Perl_pp_ord (void);
OP *Perl_pp_chr (void);
OP *Perl_pp_crypt (void);
OP *Perl_pp_ucfirst (void);
OP *Perl_pp_lcfirst (void);
OP *Perl_pp_uc (void);
OP *Perl_pp_lc (void);
OP *Perl_pp_quotemeta (void);
OP *Perl_pp_rv2av (void);
OP *Perl_pp_aelemfast (void);
OP *Perl_pp_aelem (void);
OP *Perl_pp_aslice (void);
OP *Perl_pp_each (void);
OP *Perl_pp_values (void);
OP *Perl_pp_keys (void);
OP *Perl_pp_delete (void);
OP *Perl_pp_exists (void);
OP *Perl_pp_rv2hv (void);
OP *Perl_pp_helem (void);
OP *Perl_pp_hslice (void);
OP *Perl_pp_unpack (void);
OP *Perl_pp_pack (void);
OP *Perl_pp_split (void);
OP *Perl_pp_join (void);
OP *Perl_pp_list (void);
OP *Perl_pp_lslice (void);
OP *Perl_pp_anonlist (void);
OP *Perl_pp_anonhash (void);
OP *Perl_pp_splice (void);
OP *Perl_pp_push (void);
OP *Perl_pp_pop (void);
OP *Perl_pp_shift (void);
OP *Perl_pp_unshift (void);
OP *Perl_pp_sort (void);
OP *Perl_pp_reverse (void);
OP *Perl_pp_grepstart (void);
OP *Perl_pp_grepwhile (void);
OP *Perl_pp_mapstart (void);
OP *Perl_pp_mapwhile (void);
OP *Perl_pp_range (void);
OP *Perl_pp_flip (void);
OP *Perl_pp_flop (void);
OP *Perl_pp_and (void);
OP *Perl_pp_or (void);
OP *Perl_pp_xor (void);
OP *Perl_pp_cond_expr (void);
OP *Perl_pp_andassign (void);
OP *Perl_pp_orassign (void);
OP *Perl_pp_method (void);
OP *Perl_pp_entersub (void);
OP *Perl_pp_leavesub (void);
OP *Perl_pp_leavesublv (void);
OP *Perl_pp_caller (void);
OP *Perl_pp_warn (void);
OP *Perl_pp_die (void);
OP *Perl_pp_reset (void);
OP *Perl_pp_lineseq (void);
OP *Perl_pp_nextstate (void);
OP *Perl_pp_dbstate (void);
OP *Perl_pp_unstack (void);
OP *Perl_pp_enter (void);
OP *Perl_pp_leave (void);
OP *Perl_pp_scope (void);
OP *Perl_pp_enteriter (void);
OP *Perl_pp_iter (void);
OP *Perl_pp_enterloop (void);
OP *Perl_pp_leaveloop (void);
OP *Perl_pp_return (void);
OP *Perl_pp_last (void);
OP *Perl_pp_next (void);
OP *Perl_pp_redo (void);
OP *Perl_pp_dump (void);
OP *Perl_pp_goto (void);
OP *Perl_pp_exit (void);
OP *Perl_pp_open (void);
OP *Perl_pp_close (void);
OP *Perl_pp_pipe_op (void);
OP *Perl_pp_fileno (void);
OP *Perl_pp_umask (void);
OP *Perl_pp_binmode (void);
OP *Perl_pp_tie (void);
OP *Perl_pp_untie (void);
OP *Perl_pp_tied (void);
OP *Perl_pp_dbmopen (void);
OP *Perl_pp_dbmclose (void);
OP *Perl_pp_sselect (void);
OP *Perl_pp_select (void);
OP *Perl_pp_getc (void);
OP *Perl_pp_read (void);
OP *Perl_pp_enterwrite (void);
OP *Perl_pp_leavewrite (void);
OP *Perl_pp_prtf (void);
OP *Perl_pp_print (void);
OP *Perl_pp_sysopen (void);
OP *Perl_pp_sysseek (void);
OP *Perl_pp_sysread (void);
OP *Perl_pp_syswrite (void);
OP *Perl_pp_send (void);
OP *Perl_pp_recv (void);
OP *Perl_pp_eof (void);
OP *Perl_pp_tell (void);
OP *Perl_pp_seek (void);
OP *Perl_pp_truncate (void);
OP *Perl_pp_fcntl (void);
OP *Perl_pp_ioctl (void);
OP *Perl_pp_flock (void);
OP *Perl_pp_socket (void);
OP *Perl_pp_sockpair (void);
OP *Perl_pp_bind (void);
OP *Perl_pp_connect (void);
OP *Perl_pp_listen (void);
OP *Perl_pp_accept (void);
OP *Perl_pp_shutdown (void);
OP *Perl_pp_gsockopt (void);
OP *Perl_pp_ssockopt (void);
OP *Perl_pp_getsockname (void);
OP *Perl_pp_getpeername (void);
OP *Perl_pp_lstat (void);
OP *Perl_pp_stat (void);
OP *Perl_pp_ftrread (void);
OP *Perl_pp_ftrwrite (void);
OP *Perl_pp_ftrexec (void);
OP *Perl_pp_fteread (void);
OP *Perl_pp_ftewrite (void);
OP *Perl_pp_fteexec (void);
OP *Perl_pp_ftis (void);
OP *Perl_pp_fteowned (void);
OP *Perl_pp_ftrowned (void);
OP *Perl_pp_ftzero (void);
OP *Perl_pp_ftsize (void);
OP *Perl_pp_ftmtime (void);
OP *Perl_pp_ftatime (void);
OP *Perl_pp_ftctime (void);
OP *Perl_pp_ftsock (void);
OP *Perl_pp_ftchr (void);
OP *Perl_pp_ftblk (void);
OP *Perl_pp_ftfile (void);
OP *Perl_pp_ftdir (void);
OP *Perl_pp_ftpipe (void);
OP *Perl_pp_ftlink (void);
OP *Perl_pp_ftsuid (void);
OP *Perl_pp_ftsgid (void);
OP *Perl_pp_ftsvtx (void);
OP *Perl_pp_fttty (void);
OP *Perl_pp_fttext (void);
OP *Perl_pp_ftbinary (void);
OP *Perl_pp_chdir (void);
OP *Perl_pp_chown (void);
OP *Perl_pp_chroot (void);
OP *Perl_pp_unlink (void);
OP *Perl_pp_chmod (void);
OP *Perl_pp_utime (void);
OP *Perl_pp_rename (void);
OP *Perl_pp_link (void);
OP *Perl_pp_symlink (void);
OP *Perl_pp_readlink (void);
OP *Perl_pp_mkdir (void);
OP *Perl_pp_rmdir (void);
OP *Perl_pp_open_dir (void);
OP *Perl_pp_readdir (void);
OP *Perl_pp_telldir (void);
OP *Perl_pp_seekdir (void);
OP *Perl_pp_rewinddir (void);
OP *Perl_pp_closedir (void);
OP *Perl_pp_fork (void);
OP *Perl_pp_wait (void);
OP *Perl_pp_waitpid (void);
OP *Perl_pp_system (void);
OP *Perl_pp_exec (void);
OP *Perl_pp_kill (void);
OP *Perl_pp_getppid (void);
OP *Perl_pp_getpgrp (void);
OP *Perl_pp_setpgrp (void);
OP *Perl_pp_getpriority (void);
OP *Perl_pp_setpriority (void);
OP *Perl_pp_time (void);
OP *Perl_pp_tms (void);
OP *Perl_pp_localtime (void);
OP *Perl_pp_gmtime (void);
OP *Perl_pp_alarm (void);
OP *Perl_pp_sleep (void);
OP *Perl_pp_shmget (void);
OP *Perl_pp_shmctl (void);
OP *Perl_pp_shmread (void);
OP *Perl_pp_shmwrite (void);
OP *Perl_pp_msgget (void);
OP *Perl_pp_msgctl (void);
OP *Perl_pp_msgsnd (void);
OP *Perl_pp_msgrcv (void);
OP *Perl_pp_semget (void);
OP *Perl_pp_semctl (void);
OP *Perl_pp_semop (void);
OP *Perl_pp_require (void);
OP *Perl_pp_dofile (void);
OP *Perl_pp_entereval (void);
OP *Perl_pp_leaveeval (void);
OP *Perl_pp_entertry (void);
OP *Perl_pp_leavetry (void);
OP *Perl_pp_ghbyname (void);
OP *Perl_pp_ghbyaddr (void);
OP *Perl_pp_ghostent (void);
OP *Perl_pp_gnbyname (void);
OP *Perl_pp_gnbyaddr (void);
OP *Perl_pp_gnetent (void);
OP *Perl_pp_gpbyname (void);
OP *Perl_pp_gpbynumber (void);
OP *Perl_pp_gprotoent (void);
OP *Perl_pp_gsbyname (void);
OP *Perl_pp_gsbyport (void);
OP *Perl_pp_gservent (void);
OP *Perl_pp_shostent (void);
OP *Perl_pp_snetent (void);
OP *Perl_pp_sprotoent (void);
OP *Perl_pp_sservent (void);
OP *Perl_pp_ehostent (void);
OP *Perl_pp_enetent (void);
OP *Perl_pp_eprotoent (void);
OP *Perl_pp_eservent (void);
OP *Perl_pp_gpwnam (void);
OP *Perl_pp_gpwuid (void);
OP *Perl_pp_gpwent (void);
OP *Perl_pp_spwent (void);
OP *Perl_pp_epwent (void);
OP *Perl_pp_ggrnam (void);
OP *Perl_pp_ggrgid (void);
OP *Perl_pp_ggrent (void);
OP *Perl_pp_sgrent (void);
OP *Perl_pp_egrent (void);
OP *Perl_pp_getlogin (void);
OP *Perl_pp_syscall (void);
OP *Perl_pp_lock (void);
OP *Perl_pp_threadsv (void);
OP *Perl_pp_setstate (void);
OP *Perl_pp_method_named (void);
SV* Perl_amagic_call( SV* left, SV* right, int method, int dir);
char Perl_Gv_AMupdate( HV* stash);
CV* Perl_gv_handler( HV* stash, I32 id);
OP* Perl_append_elem( I32 optype, OP* head, OP* tail);
OP* Perl_append_list( I32 optype, LISTOP* first, LISTOP* last);
I32 Perl_apply( I32 type, SV** mark, SV** sp);
void Perl_apply_attrs_string( char *stashpv, CV *cv, char *attrstr, STRLEN len);
SV* Perl_avhv_delete_ent( AV *ar, SV* keysv, I32 flags, U32 hash);
char Perl_avhv_exists_ent( AV *ar, SV* keysv, U32 hash);
SV** Perl_avhv_fetch_ent( AV *ar, SV* keysv, I32 lval, U32 hash);
SV** Perl_avhv_store_ent( AV *ar, SV* keysv, SV* val, U32 hash);
HE* Perl_avhv_iternext( AV *ar);
SV* Perl_avhv_iterval( AV *ar, HE* entry);
HV* Perl_avhv_keys( AV *ar);
void Perl_av_clear( AV* ar);
SV* Perl_av_delete( AV* ar, I32 key, I32 flags);
char Perl_av_exists( AV* ar, I32 key);
void Perl_av_extend( AV* ar, I32 key);
AV* Perl_av_fake( I32 size, SV** svp);
SV** Perl_av_fetch( AV* ar, I32 key, I32 lval);
void Perl_av_fill( AV* ar, I32 fill);
I32 Perl_av_len( AV* ar);
AV* Perl_av_make( I32 size, SV** svp);
SV* Perl_av_pop( AV* ar);
void Perl_av_push( AV* ar, SV* val);
void Perl_av_reify( AV* ar);
SV* Perl_av_shift( AV* ar);
SV** Perl_av_store( AV* ar, I32 key, SV* val);
void Perl_av_undef( AV* ar);
void Perl_av_unshift( AV* ar, I32 num);
OP* Perl_bind_match( I32 type, OP* left, OP* pat);
OP* Perl_block_end( I32 floor, OP* seq);
I32 Perl_block_gimme(void);
int Perl_block_start( int full);
void Perl_boot_core_UNIVERSAL(void);
void Perl_boot_core_PerlIO(void);
void Perl_call_list( I32 oldscope, AV* av_list);
char Perl_cando( mode_t mode, uid_t effective, struct stat* statbufp);
U32 Perl_cast_ulong( NV f);
I32 Perl_cast_i32( NV f);
IV Perl_cast_iv( NV f);
UV Perl_cast_uv( NV f);
OP* Perl_convert( I32 optype, I32 flags, OP* o);
void Perl_croak( const char* pat, ...) __attribute__((noreturn)) ;
void Perl_vcroak( const char* pat, va_list* args) __attribute__((noreturn));
void Perl_cv_ckproto( CV* cv, GV* gv, char* p);
CV* Perl_cv_clone( CV* proto);
SV* Perl_cv_const_sv( CV* cv);
SV* Perl_op_const_sv( OP* o, CV* cv);
void Perl_cv_undef( CV* cv);
void Perl_cx_dump( PERL_CONTEXT* cs);
SV* Perl_filter_add( filter_t funcp, SV* datasv);
void Perl_filter_del( filter_t funcp);
I32 Perl_filter_read( int idx, SV* buffer, int maxlen);
char** Perl_get_op_descs(void);
char** Perl_get_op_names(void);
char* Perl_get_no_modify(void);
U32* Perl_get_opargs(void);
PPADDR_t* Perl_get_ppaddr(void);
I32 Perl_cxinc(void);
void Perl_deb( const char* pat, ...) ;
void Perl_vdeb( const char* pat, va_list* args);
void Perl_debprofdump(void);
I32 Perl_debop( OP* o);
I32 Perl_debstack(void);
I32 Perl_debstackptrs(void);
char* Perl_delimcpy( char* to, char* toend, char* from, char* fromend, int delim, I32* retlen);
void Perl_deprecate( char* s);
void Perl_deprecate_old( char* s);
OP* Perl_die( const char* pat, ...) ;
OP* Perl_vdie( const char* pat, va_list* args);
OP* Perl_die_where( char* message, STRLEN msglen);
void Perl_dounwind( I32 cxix);
char Perl_do_aexec( SV* really, SV** mark, SV** sp);
char Perl_do_aexec5( SV* really, SV** mark, SV** sp, int fd, int flag);
int Perl_do_binmode( PerlIO *fp, int iotype, int mode);
void Perl_do_chop( SV* asv, SV* sv);
char Perl_do_close( GV* gv, char not_implicit);
char Perl_do_eof( GV* gv);
char Perl_do_exec( char* cmd);
char Perl_do_exec3( char* cmd, int fd, int flag);
void Perl_do_execfree(void);
I32 Perl_do_ipcctl( I32 optype, SV** mark, SV** sp);
I32 Perl_do_ipcget( I32 optype, SV** mark, SV** sp);
I32 Perl_do_msgrcv( SV** mark, SV** sp);
I32 Perl_do_msgsnd( SV** mark, SV** sp);
I32 Perl_do_semop( SV** mark, SV** sp);
I32 Perl_do_shmio( I32 optype, SV** mark, SV** sp);
void Perl_do_join( SV* sv, SV* del, SV** mark, SV** sp);
OP* Perl_do_kv(void);
char Perl_do_open( GV* gv, char* name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO* supplied_fp);
char Perl_do_open9( GV *gv, char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV *svs, I32 num);
char Perl_do_openn( GV *gv, char *name, I32 len, int as_raw, int rawmode, int rawperm, PerlIO *supplied_fp, SV **svp, I32 num);
void Perl_do_pipe( SV* sv, GV* rgv, GV* wgv);
char Perl_do_print( SV* sv, PerlIO* fp);
OP* Perl_do_readline(void);
I32 Perl_do_chomp( SV* sv);
char Perl_do_seek( GV* gv, off_t pos, int whence);
void Perl_do_sprintf( SV* sv, I32 len, SV** sarg);
off_t Perl_do_sysseek( GV* gv, off_t pos, int whence);
off_t Perl_do_tell( GV* gv);
I32 Perl_do_trans( SV* sv);
UV Perl_do_vecget( SV* sv, I32 offset, I32 size);
void Perl_do_vecset( SV* sv);
void Perl_do_vop( I32 optype, SV* sv, SV* left, SV* right);
OP* Perl_dofile( OP* term);
I32 Perl_dowantarray(void);
void Perl_dump_all(void);
void Perl_dump_eval(void);
void Perl_dump_form( GV* gv);
void Perl_gv_dump( GV* gv);
void Perl_op_dump( OP* arg);
void Perl_pmop_dump( PMOP* pm);
void Perl_dump_packsubs( HV* stash);
void Perl_dump_sub( GV* gv);
void Perl_fbm_compile( SV* sv, U32 flags);
char* Perl_fbm_instr( unsigned char* big, unsigned char* bigend, SV* littlesv, U32 flags);
char* Perl_find_script( char *scriptname, char dosearch, char **search_ext, I32 flags);
OP* Perl_force_list( OP* arg);
OP* Perl_fold_constants( OP* arg);
char* Perl_form( const char* pat, ...) ;
char* Perl_vform( const char* pat, va_list* args);
void Perl_free_tmps(void);
OP* Perl_gen_constant_list( OP* o);
char* Perl_getenv_len( const char* key, unsigned long *len);
void Perl_gp_free( GV* gv);
GP* Perl_gp_ref( GP* gp);
GV* Perl_gv_AVadd( GV* gv);
GV* Perl_gv_HVadd( GV* gv);
GV* Perl_gv_IOadd( GV* gv);
GV* Perl_gv_autoload4( HV* stash, const char* name, STRLEN len, I32 method);
void Perl_gv_check( HV* stash);
void Perl_gv_efullname( SV* sv, GV* gv);
void Perl_gv_efullname4( SV* sv, GV* gv, const char* prefix, char keepmain);
GV* Perl_gv_fetchfile( const char* name);
GV* Perl_gv_fetchmeth( HV* stash, const char* name, STRLEN len, I32 level);
GV* Perl_gv_fetchmeth_autoload( HV* stash, const char* name, STRLEN len, I32 level);
GV* Perl_gv_fetchmethod( HV* stash, const char* name);
GV* Perl_gv_fetchmethod_autoload( HV* stash, const char* name, I32 autoload);
GV* Perl_gv_fetchpv( const char* name, I32 add, I32 sv_type);
void Perl_gv_fullname( SV* sv, GV* gv);
void Perl_gv_fullname4( SV* sv, GV* gv, const char* prefix, char keepmain);
void Perl_gv_init( GV* gv, HV* stash, const char* name, STRLEN len, int multi);
HV* Perl_gv_stashpv( const char* name, I32 create);
HV* Perl_gv_stashpvn( const char* name, U32 namelen, I32 create);
HV* Perl_gv_stashsv( SV* sv, I32 create);
void Perl_hv_clear( HV* tb);
void Perl_hv_delayfree_ent( HV* hv, HE* entry);
SV* Perl_hv_delete( HV* tb, const char* key, I32 klen, I32 flags);
SV* Perl_hv_delete_ent( HV* tb, SV* key, I32 flags, U32 hash);
char Perl_hv_exists( HV* tb, const char* key, I32 klen);
char Perl_hv_exists_ent( HV* tb, SV* key, U32 hash);
SV** Perl_hv_fetch( HV* tb, const char* key, I32 klen, I32 lval);
HE* Perl_hv_fetch_ent( HV* tb, SV* key, I32 lval, U32 hash);
void Perl_hv_free_ent( HV* hv, HE* entry);
I32 Perl_hv_iterinit( HV* tb);
char* Perl_hv_iterkey( HE* entry, I32* retlen);
SV* Perl_hv_iterkeysv( HE* entry);
HE* Perl_hv_iternext( HV* tb);
SV* Perl_hv_iternextsv( HV* hv, char** key, I32* retlen);
HE* Perl_hv_iternext_flags( HV* tb, I32 flags);
SV* Perl_hv_iterval( HV* tb, HE* entry);
void Perl_hv_ksplit( HV* hv, IV newmax);
void Perl_hv_magic( HV* hv, GV* gv, int how);
SV** Perl_hv_store( HV* tb, const char* key, I32 klen, SV* val, U32 hash);
HE* Perl_hv_store_ent( HV* tb, SV* key, SV* val, U32 hash);
SV** Perl_hv_store_flags( HV* tb, const char* key, I32 klen, SV* val, U32 hash, int flags);
void Perl_hv_undef( HV* tb);
I32 Perl_ibcmp( const char* a, const char* b, I32 len);
I32 Perl_ibcmp_locale( const char* a, const char* b, I32 len);
I32 Perl_ibcmp_utf8( const char* a, char **pe1, UV l1, char u1, const char* b, char **pe2, UV l2, char u2);
char Perl_ingroup( gid_t testgid, uid_t effective);
void Perl_init_argv_symbols( int, char **);
void Perl_init_debugger(void);
void Perl_init_stacks(void);
void Perl_init_tm( struct tm *ptm);
U32 Perl_intro_my(void);
char* Perl_instr( const char* big, const char* little);
char Perl_io_close( IO* io, char not_implicit);
OP* Perl_invert( OP* cmd);
char Perl_is_gv_magical( char *name, STRLEN len, U32 flags);
I32 Perl_is_lvalue_sub(void);
U32 Perl_to_uni_upper_lc( U32 c);
U32 Perl_to_uni_title_lc( U32 c);
U32 Perl_to_uni_lower_lc( U32 c);
char Perl_is_uni_alnum( UV c);
char Perl_is_uni_alnumc( UV c);
char Perl_is_uni_idfirst( UV c);
char Perl_is_uni_alpha( UV c);
char Perl_is_uni_ascii( UV c);
char Perl_is_uni_space( UV c);
char Perl_is_uni_cntrl( UV c);
char Perl_is_uni_graph( UV c);
char Perl_is_uni_digit( UV c);
char Perl_is_uni_upper( UV c);
char Perl_is_uni_lower( UV c);
char Perl_is_uni_print( UV c);
char Perl_is_uni_punct( UV c);
char Perl_is_uni_xdigit( UV c);
UV Perl_to_uni_upper( UV c, U8 *p, STRLEN *lenp);
UV Perl_to_uni_title( UV c, U8 *p, STRLEN *lenp);
UV Perl_to_uni_lower( UV c, U8 *p, STRLEN *lenp);
UV Perl_to_uni_fold( UV c, U8 *p, STRLEN *lenp);
char Perl_is_uni_alnum_lc( UV c);
char Perl_is_uni_alnumc_lc( UV c);
char Perl_is_uni_idfirst_lc( UV c);
char Perl_is_uni_alpha_lc( UV c);
char Perl_is_uni_ascii_lc( UV c);
char Perl_is_uni_space_lc( UV c);
char Perl_is_uni_cntrl_lc( UV c);
char Perl_is_uni_graph_lc( UV c);
char Perl_is_uni_digit_lc( UV c);
char Perl_is_uni_upper_lc( UV c);
char Perl_is_uni_lower_lc( UV c);
char Perl_is_uni_print_lc( UV c);
char Perl_is_uni_punct_lc( UV c);
char Perl_is_uni_xdigit_lc( UV c);
STRLEN Perl_is_utf8_char( U8 *p);
char Perl_is_utf8_string( U8 *s, STRLEN len);
char Perl_is_utf8_string_loc( U8 *s, STRLEN len, U8 **p);
char Perl_is_utf8_alnum( U8 *p);
char Perl_is_utf8_alnumc( U8 *p);
char Perl_is_utf8_idfirst( U8 *p);
char Perl_is_utf8_idcont( U8 *p);
char Perl_is_utf8_alpha( U8 *p);
char Perl_is_utf8_ascii( U8 *p);
char Perl_is_utf8_space( U8 *p);
char Perl_is_utf8_cntrl( U8 *p);
char Perl_is_utf8_digit( U8 *p);
char Perl_is_utf8_graph( U8 *p);
char Perl_is_utf8_upper( U8 *p);
char Perl_is_utf8_lower( U8 *p);
char Perl_is_utf8_print( U8 *p);
char Perl_is_utf8_punct( U8 *p);
char Perl_is_utf8_xdigit( U8 *p);
char Perl_is_utf8_mark( U8 *p);
OP* Perl_jmaybe( OP* arg);
I32 Perl_keyword( char* d, I32 len);
void Perl_leave_scope( I32 base);
void Perl_lex_end(void);
void Perl_lex_start( SV* line);
void Perl_op_null( OP* o);
void Perl_op_clear( OP* o);
OP* Perl_linklist( OP* o);
OP* Perl_list( OP* o);
OP* Perl_listkids( OP* o);
void Perl_load_module( U32 flags, SV* name, SV* ver, ...);
void Perl_vload_module( U32 flags, SV* name, SV* ver, va_list* args);
OP* Perl_localize( OP* arg, I32 lexical);
I32 Perl_looks_like_number( SV* sv);
UV Perl_grok_bin( char* start, STRLEN* len, I32* flags, NV *result);
UV Perl_grok_hex( char* start, STRLEN* len, I32* flags, NV *result);
int Perl_grok_number( const char *pv, STRLEN len, UV *valuep);
char Perl_grok_numeric_radix( const char **sp, const char *send);
UV Perl_grok_oct( char* start, STRLEN* len, I32* flags, NV *result);
int Perl_magic_clearenv( SV* sv, MAGIC* mg);
int Perl_magic_clear_all_env( SV* sv, MAGIC* mg);
int Perl_magic_clearpack( SV* sv, MAGIC* mg);
int Perl_magic_clearsig( SV* sv, MAGIC* mg);
int Perl_magic_existspack( SV* sv, MAGIC* mg);
int Perl_magic_freeregexp( SV* sv, MAGIC* mg);
int Perl_magic_freeovrld( SV* sv, MAGIC* mg);
int Perl_magic_get( SV* sv, MAGIC* mg);
int Perl_magic_getarylen( SV* sv, MAGIC* mg);
int Perl_magic_getdefelem( SV* sv, MAGIC* mg);
int Perl_magic_getglob( SV* sv, MAGIC* mg);
int Perl_magic_getnkeys( SV* sv, MAGIC* mg);
int Perl_magic_getpack( SV* sv, MAGIC* mg);
int Perl_magic_getpos( SV* sv, MAGIC* mg);
int Perl_magic_getsig( SV* sv, MAGIC* mg);
int Perl_magic_getsubstr( SV* sv, MAGIC* mg);
int Perl_magic_gettaint( SV* sv, MAGIC* mg);
int Perl_magic_getuvar( SV* sv, MAGIC* mg);
int Perl_magic_getvec( SV* sv, MAGIC* mg);
U32 Perl_magic_len( SV* sv, MAGIC* mg);
int Perl_magic_nextpack( SV* sv, MAGIC* mg, SV* key);
U32 Perl_magic_regdata_cnt( SV* sv, MAGIC* mg);
int Perl_magic_regdatum_get( SV* sv, MAGIC* mg);
int Perl_magic_regdatum_set( SV* sv, MAGIC* mg);
int Perl_magic_set( SV* sv, MAGIC* mg);
int Perl_magic_setamagic( SV* sv, MAGIC* mg);
int Perl_magic_setarylen( SV* sv, MAGIC* mg);
int Perl_magic_setbm( SV* sv, MAGIC* mg);
int Perl_magic_setdbline( SV* sv, MAGIC* mg);
int Perl_magic_setcollxfrm( SV* sv, MAGIC* mg);
int Perl_magic_setdefelem( SV* sv, MAGIC* mg);
int Perl_magic_setenv( SV* sv, MAGIC* mg);
int Perl_magic_setfm( SV* sv, MAGIC* mg);
int Perl_magic_setisa( SV* sv, MAGIC* mg);
int Perl_magic_setglob( SV* sv, MAGIC* mg);
int Perl_magic_setmglob( SV* sv, MAGIC* mg);
int Perl_magic_setnkeys( SV* sv, MAGIC* mg);
int Perl_magic_setpack( SV* sv, MAGIC* mg);
int Perl_magic_setpos( SV* sv, MAGIC* mg);
int Perl_magic_setregexp( SV* sv, MAGIC* mg);
int Perl_magic_setsig( SV* sv, MAGIC* mg);
int Perl_magic_setsubstr( SV* sv, MAGIC* mg);
int Perl_magic_settaint( SV* sv, MAGIC* mg);
int Perl_magic_setuvar( SV* sv, MAGIC* mg);
int Perl_magic_setvec( SV* sv, MAGIC* mg);
int Perl_magic_setutf8( SV* sv, MAGIC* mg);
int Perl_magic_set_all_env( SV* sv, MAGIC* mg);
U32 Perl_magic_sizepack( SV* sv, MAGIC* mg);
int Perl_magic_wipepack( SV* sv, MAGIC* mg);
void Perl_magicname( char* sym, char* name, I32 namlen);
void Perl_markstack_grow(void);
char* Perl_mem_collxfrm( const char* s, STRLEN len, STRLEN* xlen);
SV* Perl_mess( const char* pat, ...) ;
SV* Perl_vmess( const char* pat, va_list* args);
void Perl_qerror( SV* err);
void Perl_sortsv( SV ** array, size_t num_elts, SVCOMPARE_t cmp);
int Perl_mg_clear( SV* sv);
int Perl_mg_copy( SV* sv, SV* nsv, const char* key, I32 klen);
MAGIC* Perl_mg_find( SV* sv, int type);
int Perl_mg_free( SV* sv);
int Perl_mg_get( SV* sv);
U32 Perl_mg_length( SV* sv);
void Perl_mg_magical( SV* sv);
int Perl_mg_set( SV* sv);
I32 Perl_mg_size( SV* sv);
void Perl_mini_mktime( struct tm *pm);
OP* Perl_mod( OP* o, I32 type);
int Perl_mode_from_discipline( SV* discp);
char* Perl_moreswitches( char* s);
OP* Perl_my( OP* o);
NV Perl_my_atof( const char *s);
void Perl_my_exit( U32 status) __attribute__((noreturn));
void Perl_my_failure_exit(void) __attribute__((noreturn));
I32 Perl_my_fflush_all(void);
pid_t Perl_my_fork(void);
void Perl_atfork_lock(void);
void Perl_atfork_unlock(void);
I32 Perl_my_lstat(void);
I32 Perl_my_pclose( PerlIO* ptr);
PerlIO* Perl_my_popen( char* cmd, char* mode);
PerlIO* Perl_my_popen_list( char* mode, int n, SV ** args);
void Perl_my_setenv( char* nam, char* val);
I32 Perl_my_stat(void);
char * Perl_my_strftime( char *fmt, int sec, int min, int hour, int mday, int mon, int year, int wday, int yday, int isdst);
void Perl_my_unexec(void);
OP* Perl_newANONLIST( OP* o);
OP* Perl_newANONHASH( OP* o);
OP* Perl_newANONSUB( I32 floor, OP* proto, OP* block);
OP* Perl_newASSIGNOP( I32 flags, OP* left, I32 optype, OP* right);
OP* Perl_newCONDOP( I32 flags, OP* expr, OP* trueop, OP* falseop);
CV* Perl_newCONSTSUB( HV* stash, char* name, SV* sv);
void Perl_newFORM( I32 floor, OP* o, OP* block);
OP* Perl_newFOROP( I32 flags, char* label, line_t forline, OP* sclr, OP* expr, OP*block, OP*cont);
OP* Perl_newLOGOP( I32 optype, I32 flags, OP* left, OP* right);
OP* Perl_newLOOPEX( I32 type, OP* label);
OP* Perl_newLOOPOP( I32 flags, I32 debuggable, OP* expr, OP* block);
OP* Perl_newNULLLIST(void);
OP* Perl_newOP( I32 optype, I32 flags);
void Perl_newPROG( OP* o);
OP* Perl_newRANGE( I32 flags, OP* left, OP* right);
OP* Perl_newSLICEOP( I32 flags, OP* subscript, OP* listop);
OP* Perl_newSTATEOP( I32 flags, char* label, OP* o);
CV* Perl_newSUB( I32 floor, OP* o, OP* proto, OP* block);
CV* Perl_newXS( char* name, XSUBADDR_t f, char* filename);
AV* Perl_newAV(void);
OP* Perl_newAVREF( OP* o);
OP* Perl_newBINOP( I32 type, I32 flags, OP* first, OP* last);
OP* Perl_newCVREF( I32 flags, OP* o);
OP* Perl_newGVOP( I32 type, I32 flags, GV* gv);
GV* Perl_newGVgen( char* pack);
OP* Perl_newGVREF( I32 type, OP* o);
OP* Perl_newHVREF( OP* o);
HV* Perl_newHV(void);
HV* Perl_newHVhv( HV* hv);
IO* Perl_newIO(void);
OP* Perl_newLISTOP( I32 type, I32 flags, OP* first, OP* last);
OP* Perl_newPADOP( I32 type, I32 flags, SV* sv);
OP* Perl_newPMOP( I32 type, I32 flags);
OP* Perl_newPVOP( I32 type, I32 flags, char* pv);
SV* Perl_newRV( SV* pref);
SV* Perl_newRV_noinc( SV *sv);
SV* Perl_newSV( STRLEN len);
OP* Perl_newSVREF( OP* o);
OP* Perl_newSVOP( I32 type, I32 flags, SV* sv);
SV* Perl_newSViv( IV i);
SV* Perl_newSVuv( UV u);
SV* Perl_newSVnv( NV n);
SV* Perl_newSVpv( const char* s, STRLEN len);
SV* Perl_newSVpvn( const char* s, STRLEN len);
SV* Perl_newSVpvn_share( const char* s, I32 len, U32 hash);
SV* Perl_newSVpvf( const char* pat, ...) ;
SV* Perl_vnewSVpvf( const char* pat, va_list* args);
SV* Perl_newSVrv( SV* rv, const char* classname);
SV* Perl_newSVsv( SV* old);
OP* Perl_newUNOP( I32 type, I32 flags, OP* first);
OP* Perl_newWHILEOP( I32 flags, I32 debuggable, LOOP* loop, I32 whileline, OP* expr, OP* block, OP* cont);
PERL_SI* Perl_new_stackinfo( I32 stitems, I32 cxitems);
char* Perl_scan_vstring( char *vstr, SV *sv);
PerlIO* Perl_nextargv( GV* gv);
char* Perl_ninstr( const char* big, const char* bigend, const char* little, const char* lend);
OP* Perl_oopsCV( OP* o);
void Perl_op_free( OP* arg);
void Perl_package( OP* o);
PADOFFSET Perl_pad_alloc( I32 optype, U32 tmptype);
PADOFFSET Perl_allocmy( char* name);
PADOFFSET Perl_pad_findmy( char* name);
OP* Perl_oopsAV( OP* o);
OP* Perl_oopsHV( OP* o);
void Perl_pad_leavemy(void);
SV* Perl_pad_sv( PADOFFSET po);
void Perl_pad_free( PADOFFSET po);
void Perl_pad_reset(void);
void Perl_pad_swipe( PADOFFSET po, char refadjust);
void Perl_peep( OP* o);
PerlIO* Perl_start_glob( SV* pattern, IO *io);
void Perl_call_atexit( ATEXIT_t fn, void *ptr);
I32 Perl_call_argv( const char* sub_name, I32 flags, char** argv);
I32 Perl_call_method( const char* methname, I32 flags);
I32 Perl_call_pv( const char* sub_name, I32 flags);
I32 Perl_call_sv( SV* sv, I32 flags);
void Perl_despatch_signals(void);
SV* Perl_eval_pv( const char* p, I32 croak_on_error);
I32 Perl_eval_sv( SV* sv, I32 flags);
SV* Perl_get_sv( const char* name, I32 create);
AV* Perl_get_av( const char* name, I32 create);
HV* Perl_get_hv( const char* name, I32 create);
CV* Perl_get_cv( const char* name, I32 create);
int Perl_init_i18nl10n( int printwarn);
int Perl_init_i18nl14n( int printwarn);
void Perl_new_collate( char* newcoll);
void Perl_new_ctype( char* newctype);
void Perl_new_numeric( char* newcoll);
void Perl_set_numeric_local(void);
void Perl_set_numeric_radix(void);
void Perl_set_numeric_standard(void);
void Perl_require_pv( const char* pv);
void Perl_pack_cat( SV *cat, char *pat, char *patend, SV **beglist, SV **endlist, SV ***next_in_list, U32 flags);
void Perl_packlist( SV *cat, char *pat, char *patend, SV **beglist, SV **endlist);
void Perl_pidgone( pid_t pid, int status);
void Perl_pmflag( U32* pmfl, int ch);
OP* Perl_pmruntime( OP* pm, OP* expr, OP* repl);
OP* Perl_pmtrans( OP* o, OP* expr, OP* repl);
OP* Perl_pop_return(void);
void Perl_pop_scope(void);
OP* Perl_prepend_elem( I32 optype, OP* head, OP* tail);
void Perl_push_return( OP* o);
void Perl_push_scope(void);
OP* Perl_ref( OP* o, I32 type);
OP* Perl_refkids( OP* o, I32 type);
void Perl_regdump( regexp* r);
SV* Perl_regclass_swash( struct regnode *n, char doinit, SV **listsvp, SV **altsvp);
I32 Perl_pregexec( regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, U32 nosave);
void Perl_pregfree( struct regexp* r);
regexp* Perl_pregcomp( char* exp, char* xend, PMOP* pm);
char* Perl_re_intuit_start( regexp* prog, SV* sv, char* strpos, char* strend, U32 flags, struct re_scream_pos_data_s *data);
SV* Perl_re_intuit_string( regexp* prog);
I32 Perl_regexec_flags( regexp* prog, char* stringarg, char* strend, char* strbeg, I32 minend, SV* screamer, void* data, U32 flags);
regnode* Perl_regnext( regnode* p);
void Perl_regprop( SV* sv, regnode* o);
void Perl_repeatcpy( char* to, const char* from, I32 len, I32 count);
char* Perl_rninstr( const char* big, const char* bigend, const char* little, const char* lend);
Sighandler_t Perl_rsignal( int i, Sighandler_t t);
int Perl_rsignal_restore( int i, Sigsave_t* t);
int Perl_rsignal_save( int i, Sighandler_t t1, Sigsave_t* t2);
Sighandler_t Perl_rsignal_state( int i);
void Perl_rxres_free( void** rsp);
void Perl_rxres_restore( void** rsp, REGEXP* prx);
void Perl_rxres_save( void** rsp, REGEXP* prx);
char* Perl_savepv( const char* pv);
char* Perl_savesharedpv( const char* pv);
char* Perl_savepvn( const char* pv, I32 len);
void Perl_savestack_grow(void);
void Perl_savestack_grow_cnt( I32 need);
void Perl_save_aelem( AV* av, I32 idx, SV **sptr);
I32 Perl_save_alloc( I32 size, I32 pad);
void Perl_save_aptr( AV** aptr);
AV* Perl_save_ary( GV* gv);
void Perl_save_bool( char* boolp);
void Perl_save_clearsv( SV** svp);
void Perl_save_delete( HV* hv, char* key, I32 klen);
void Perl_save_destructor( DESTRUCTORFUNC_NOCONTEXT_t f, void* p);
void Perl_save_destructor_x( DESTRUCTORFUNC_t f, void* p);
void Perl_save_freesv( SV* sv);
void Perl_save_freeop( OP* o);
void Perl_save_freepv( char* pv);
void Perl_save_generic_svref( SV** sptr);
void Perl_save_generic_pvref( char** str);
void Perl_save_shared_pvref( char** str);
void Perl_save_gp( GV* gv, I32 empty);
HV* Perl_save_hash( GV* gv);
void Perl_save_helem( HV* hv, SV *key, SV **sptr);
void Perl_save_hints(void);
void Perl_save_hptr( HV** hptr);
void Perl_save_I16( I16* intp);
void Perl_save_I32( I32* intp);
void Perl_save_I8( I8* bytep);
void Perl_save_int( int* intp);
void Perl_save_item( SV* item);
void Perl_save_iv( IV* iv);
void Perl_save_list( SV** sarg, I32 maxsarg);
void Perl_save_long( long* longp);
void Perl_save_mortalizesv( SV* sv);
void Perl_save_nogv( GV* gv);
void Perl_save_op(void);
SV* Perl_save_scalar( GV* gv);
void Perl_save_pptr( char** pptr);
void Perl_save_vptr( void* pptr);
void Perl_save_re_context(void);
void Perl_save_padsv( PADOFFSET off);
void Perl_save_sptr( SV** sptr);
SV* Perl_save_svref( SV** sptr);
SV** Perl_save_threadsv( PADOFFSET i);
OP* Perl_sawparens( OP* o);
OP* Perl_scalar( OP* o);
OP* Perl_scalarkids( OP* o);
OP* Perl_scalarseq( OP* o);
OP* Perl_scalarvoid( OP* o);
NV Perl_scan_bin( char* start, STRLEN len, STRLEN* retlen);
NV Perl_scan_hex( char* start, STRLEN len, STRLEN* retlen);
char* Perl_scan_num( char* s, YYSTYPE *lvalp);
NV Perl_scan_oct( char* start, STRLEN len, STRLEN* retlen);
OP* Perl_scope( OP* o);
char* Perl_screaminstr( SV* bigsv, SV* littlesv, I32 start_shift, I32 end_shift, I32 *state, I32 last);
I32 Perl_setenv_getix( char* nam);
void Perl_setdefout( GV* gv);
HEK* Perl_share_hek( const char* sv, I32 len, U32 hash);
void Perl_sighandler(int sig);
void Perl_csighandler(int sig);
SV** Perl_stack_grow( SV** sp, SV**p, int n);
I32 Perl_start_subparse( I32 is_format, U32 flags);
void Perl_sub_crush_depth( CV* cv);
char Perl_sv_2bool( SV* sv);
CV* Perl_sv_2cv( SV* sv, HV** st, GV** gvp, I32 lref);
IO* Perl_sv_2io( SV* sv);
IV Perl_sv_2iv( SV* sv);
SV* Perl_sv_2mortal( SV* sv);
NV Perl_sv_2nv( SV* sv);
char* Perl_sv_2pvutf8( SV* sv, STRLEN* lp);
char* Perl_sv_2pvbyte( SV* sv, STRLEN* lp);
char* Perl_sv_pvn_nomg( SV* sv, STRLEN* lp);
UV Perl_sv_2uv( SV* sv);
IV Perl_sv_iv( SV* sv);
UV Perl_sv_uv( SV* sv);
NV Perl_sv_nv( SV* sv);
char* Perl_sv_pvn( SV *sv, STRLEN *len);
char* Perl_sv_pvutf8n( SV *sv, STRLEN *len);
char* Perl_sv_pvbyten( SV *sv, STRLEN *len);
I32 Perl_sv_true( SV *sv);
void Perl_sv_add_arena( char* ptr, U32 size, U32 flags);
int Perl_sv_backoff( SV* sv);
SV* Perl_sv_bless( SV* sv, HV* stash);
void Perl_sv_catpvf( SV* sv, const char* pat, ...) ;
void Perl_sv_vcatpvf( SV* sv, const char* pat, va_list* args);
void Perl_sv_catpv( SV* sv, const char* ptr);
void Perl_sv_chop( SV* sv, char* ptr);
I32 Perl_sv_clean_all(void);
void Perl_sv_clean_objs(void);
void Perl_sv_clear( SV* sv);
I32 Perl_sv_cmp( SV* sv1, SV* sv2);
I32 Perl_sv_cmp_locale( SV* sv1, SV* sv2);
char* Perl_sv_collxfrm( SV* sv, STRLEN* nxp);
OP* Perl_sv_compile_2op( SV* sv, OP** startp, char* code, PAD** padp);
int Perl_getcwd_sv( SV* sv);
void Perl_sv_dec( SV* sv);
void Perl_sv_dump( SV* sv);
char Perl_sv_derived_from( SV* sv, const char* name);
I32 Perl_sv_eq( SV* sv1, SV* sv2);
void Perl_sv_free( SV* sv);
void Perl_sv_free_arenas(void);
char* Perl_sv_gets( SV* sv, PerlIO* fp, I32 append);
char* Perl_sv_grow( SV* sv, STRLEN newlen);
void Perl_sv_inc( SV* sv);
void Perl_sv_insert( SV* bigsv, STRLEN offset, STRLEN len, char* little, STRLEN littlelen);
int Perl_sv_isa( SV* sv, const char* name);
int Perl_sv_isobject( SV* sv);
STRLEN Perl_sv_len( SV* sv);
STRLEN Perl_sv_len_utf8( SV* sv);
void Perl_sv_magic( SV* sv, SV* obj, int how, const char* name, I32 namlen);
MAGIC * Perl_sv_magicext( SV* sv, SV* obj, int how, MGVTBL *vtbl, const char* name, I32 namlen);
SV* Perl_sv_mortalcopy( SV* oldsv);
SV* Perl_sv_newmortal(void);
SV* Perl_sv_newref( SV* sv);
char* Perl_sv_peek( SV* sv);
void Perl_sv_pos_u2b( SV* sv, I32* offsetp, I32* lenp);
void Perl_sv_pos_b2u( SV* sv, I32* offsetp);
char* Perl_sv_pvutf8n_force( SV* sv, STRLEN* lp);
char* Perl_sv_pvbyten_force( SV* sv, STRLEN* lp);
char* Perl_sv_recode_to_utf8( SV* sv, SV *encoding);
char Perl_sv_cat_decode( SV* dsv, SV *encoding, SV *ssv, int *offset, char* tstr, int tlen);
char* Perl_sv_reftype( SV* sv, int ob);
void Perl_sv_replace( SV* sv, SV* nsv);
void Perl_sv_report_used(void);
void Perl_sv_reset( char* s, HV* stash);
void Perl_sv_setpvf( SV* sv, const char* pat, ...) ;
void Perl_sv_vsetpvf( SV* sv, const char* pat, va_list* args);
void Perl_sv_setiv( SV* sv, IV num);
void Perl_sv_setpviv( SV* sv, IV num);
void Perl_sv_setuv( SV* sv, UV num);
void Perl_sv_setnv( SV* sv, NV num);
SV* Perl_sv_setref_iv( SV* rv, const char* classname, IV iv);
SV* Perl_sv_setref_uv( SV* rv, const char* classname, UV uv);
SV* Perl_sv_setref_nv( SV* rv, const char* classname, NV nv);
SV* Perl_sv_setref_pv( SV* rv, const char* classname, void* pv);
SV* Perl_sv_setref_pvn( SV* rv, const char* classname, char* pv, STRLEN n);
void Perl_sv_setpv( SV* sv, const char* ptr);
void Perl_sv_setpvn( SV* sv, const char* ptr, STRLEN len);
void Perl_sv_taint( SV* sv);
char Perl_sv_tainted( SV* sv);
int Perl_sv_unmagic( SV* sv, int type);
void Perl_sv_unref( SV* sv);
void Perl_sv_unref_flags( SV* sv, U32 flags);
void Perl_sv_untaint( SV* sv);
char Perl_sv_upgrade( SV* sv, U32 mt);
void Perl_sv_usepvn( SV* sv, char* ptr, STRLEN len);
void Perl_sv_vcatpvfn( SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, char *maybe_tainted);
void Perl_sv_vsetpvfn( SV* sv, const char* pat, STRLEN patlen, va_list* args, SV** svargs, I32 svmax, char *maybe_tainted);
NV Perl_str_to_version( SV *sv);
SV* Perl_swash_init( char* pkg, char* name, SV* listsv, I32 minbits, I32 none);
UV Perl_swash_fetch( SV *sv, U8 *ptr, char do_utf8);
void Perl_taint_env(void);
void Perl_taint_proper( const char* f, const char* s);
UV Perl_to_utf8_case( U8 *p, U8* ustrp, STRLEN *lenp, SV **swash, char *normal, char *special);
UV Perl_to_utf8_lower( U8 *p, U8* ustrp, STRLEN *lenp);
UV Perl_to_utf8_upper( U8 *p, U8* ustrp, STRLEN *lenp);
UV Perl_to_utf8_title( U8 *p, U8* ustrp, STRLEN *lenp);
UV Perl_to_utf8_fold( U8 *p, U8* ustrp, STRLEN *lenp);
I32 Perl_unpack_str( char *pat, char *patend, char *s, char *strbeg, char *strend, char **new_s, I32 ocnt, U32 flags);
I32 Perl_unpackstring( char *pat, char *patend, char *s, char *strend, U32 flags);
void Perl_unsharepvn( const char* sv, I32 len, U32 hash);
void Perl_unshare_hek( HEK* hek);
void Perl_utilize( int aver, I32 floor, OP* version, OP* idop, OP* arg);
U8* Perl_utf16_to_utf8( U8* p, U8 *d, I32 bytelen, I32 *newlen);
U8* Perl_utf16_to_utf8_reversed( U8* p, U8 *d, I32 bytelen, I32 *newlen);
STRLEN Perl_utf8_length( U8* s, U8 *e);
IV Perl_utf8_distance( U8 *a, U8 *b);
U8* Perl_utf8_hop( U8 *s, I32 off);
U8* Perl_utf8_to_bytes( U8 *s, STRLEN *len);
U8* Perl_bytes_from_utf8( U8 *s, STRLEN *len, char *is_utf8);
U8* Perl_bytes_to_utf8( U8 *s, STRLEN *len);
UV Perl_utf8_to_uvchr( U8 *s, STRLEN* retlen);
UV Perl_utf8_to_uvuni( U8 *s, STRLEN* retlen);
UV Perl_utf8n_to_uvuni( U8 *s, STRLEN curlen, STRLEN* retlen, U32 flags);
UV Perl_utf8n_to_uvuni( U8 *s, STRLEN curlen, STRLEN* retlen, U32 flags);
U8* Perl_uvuni_to_utf8( U8 *d, UV uv);
U8* Perl_uvuni_to_utf8( U8 *d, UV uv);
U8* Perl_uvchr_to_utf8_flags( U8 *d, UV uv, UV flags);
U8* Perl_uvuni_to_utf8_flags( U8 *d, UV uv, UV flags);
char* Perl_pv_uni_display( SV *dsv, U8 *spv, STRLEN len, STRLEN pvlim, UV flags);
char* Perl_sv_uni_display( SV *dsv, SV *ssv, STRLEN pvlim, UV flags);
void Perl_vivify_defelem( SV* sv);
void Perl_vivify_ref( SV* sv, U32 to_what);
I32 Perl_wait4pid( pid_t pid, int* statusp, int flags);
U32 Perl_parse_unicode_opts( char **popt);
U32 Perl_seed(void);
UV Perl_get_hash_seed(void);
void Perl_report_evil_fh( GV *gv, IO *io, I32 op);
void Perl_report_uninit(void);
void Perl_warn( const char* pat, ...) ;
void Perl_vwarn( const char* pat, va_list* args);
void Perl_warner( U32 err, const char* pat, ...) ;
void Perl_vwarner( U32 err, const char* pat, va_list* args);
void Perl_watch( char** addr);
I32 Perl_whichsig( char* sig);
void Perl_write_to_stderr( const char* message, int msglen);
int Perl_yyerror( char* s);
int Perl_yylex(void);
int Perl_yyparse(void);
int Perl_yywarn( char* s);
void * Perl_safesysmalloc(size_t nbytes);
void * Perl_safesyscalloc(size_t elements, size_t size);
void * Perl_safesysrealloc(void * where, size_t nbytes);
void Perl_safesysfree(void * where);
int Perl_runops_standard(void);
int Perl_runops_debug(void);
void Perl_sv_catpvf_mg( SV *sv, const char* pat, ...) ;
void Perl_sv_vcatpvf_mg( SV* sv, const char* pat, va_list* args);
void Perl_sv_catpv_mg( SV *sv, const char *ptr);
void Perl_sv_catpvn_mg( SV *sv, const char *ptr, STRLEN len);
void Perl_sv_catsv_mg( SV *dstr, SV *sstr);
void Perl_sv_setpvf_mg( SV *sv, const char* pat, ...) ;
void Perl_sv_vsetpvf_mg( SV* sv, const char* pat, va_list* args);
void Perl_sv_setiv_mg( SV *sv, IV i);
void Perl_sv_setpviv_mg( SV *sv, IV iv);
void Perl_sv_setuv_mg( SV *sv, UV u);
void Perl_sv_setnv_mg( SV *sv, NV num);
void Perl_sv_setpv_mg( SV *sv, const char *ptr);
void Perl_sv_setpvn_mg( SV *sv, const char *ptr, STRLEN len);
void Perl_sv_setsv_mg( SV *dstr, SV *sstr);
void Perl_sv_usepvn_mg( SV *sv, char *ptr, STRLEN len);
MGVTBL* Perl_get_vtbl( int vtbl_id);
char* Perl_pv_display( SV *dsv, char *pv, STRLEN cur, STRLEN len, STRLEN pvlim);
void Perl_dump_indent( I32 level, PerlIO *file, const char* pat, ...) ;
void Perl_dump_vindent( I32 level, PerlIO *file, const char* pat, va_list *args);
void Perl_do_gv_dump( I32 level, PerlIO *file, char *name, GV *sv);
void Perl_do_gvgv_dump( I32 level, PerlIO *file, char *name, GV *sv);
void Perl_do_hv_dump( I32 level, PerlIO *file, char *name, HV *sv);
void Perl_do_magic_dump( I32 level, PerlIO *file, MAGIC *mg, I32 nest, I32 maxnest, char dumpops, STRLEN pvlim);
void Perl_do_op_dump( I32 level, PerlIO *file, OP *o);
void Perl_do_pmop_dump( I32 level, PerlIO *file, PMOP *pm);
void Perl_do_sv_dump( I32 level, PerlIO *file, SV *sv, I32 nest, I32 maxnest, char dumpops, STRLEN pvlim);
void Perl_magic_dump( MAGIC *mg);
void Perl_reginitcolors(void);
char* Perl_sv_2pv_nolen( SV* sv);
char* Perl_sv_2pvutf8_nolen( SV* sv);
char* Perl_sv_2pvbyte_nolen( SV* sv);
char Perl_sv_utf8_downgrade( SV *sv, char fail_ok);
void Perl_sv_utf8_encode( SV *sv);
char Perl_sv_utf8_decode( SV *sv);
void Perl_sv_force_normal( SV *sv);
void Perl_sv_force_normal_flags( SV *sv, U32 flags);
void Perl_tmps_grow( I32 n);
SV* Perl_sv_rvweaken( SV *sv);
int Perl_magic_killbackrefs( SV *sv, MAGIC *mg);
OP* Perl_newANONATTRSUB( I32 floor, OP *proto, OP *attrs, OP *block);
CV* Perl_newATTRSUB( I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
void Perl_newMYSUB( I32 floor, OP *o, OP *proto, OP *attrs, OP *block);
OP * Perl_my_attrs( OP *o, OP *attrs);
void Perl_boot_core_xsutils(void);
char * Perl_custom_op_name( OP* op);
char * Perl_custom_op_desc( OP* op);
void Perl_sv_nosharing( SV *);
void Perl_sv_nolocking( SV *);
void Perl_sv_nounlocking( SV *);
int Perl_nothreadhook(void);
void Perl_sv_setsv_flags( SV* dsv, SV* ssv, I32 flags);
void Perl_sv_catpvn_flags( SV* sv, const char* ptr, STRLEN len, I32 flags);
void Perl_sv_catsv_flags( SV* dsv, SV* ssv, I32 flags);
STRLEN Perl_sv_utf8_upgrade_flags( SV *sv, I32 flags);
char* Perl_sv_pvn_force_flags( SV* sv, STRLEN* lp, I32 flags);
char* Perl_sv_2pv_flags( SV* sv, STRLEN* lp, I32 flags);
void Perl_sv_copypv( SV* dsv, SV* ssv);
char* Perl_my_atof2( const char *s, NV* value);
int Perl_my_socketpair(int family, int type, int protocol, int fd[2]);
int Perl_PerlIO_close( PerlIO *);
int Perl_PerlIO_fill( PerlIO *);
int Perl_PerlIO_fileno( PerlIO *);
int Perl_PerlIO_eof( PerlIO *);
int Perl_PerlIO_error( PerlIO *);
int Perl_PerlIO_flush( PerlIO *);
void Perl_PerlIO_clearerr( PerlIO *);
void Perl_PerlIO_set_cnt( PerlIO *, int);
void Perl_PerlIO_set_ptrcnt( PerlIO *, char *, int);
void Perl_PerlIO_setlinebuf( PerlIO *);
ssize_t Perl_PerlIO_read( PerlIO *, void *, size_t);
ssize_t Perl_PerlIO_write( PerlIO *, const void *, size_t);
ssize_t Perl_PerlIO_unread( PerlIO *, const void *, size_t);
off_t Perl_PerlIO_tell( PerlIO *);
int Perl_PerlIO_seek( PerlIO *, off_t, int);
char * Perl_PerlIO_get_base( PerlIO *);
char * Perl_PerlIO_get_ptr( PerlIO *);
int Perl_PerlIO_get_bufsiz( PerlIO *);
int Perl_PerlIO_get_cnt( PerlIO *);
PerlIO * Perl_PerlIO_stdin(void);
PerlIO * Perl_PerlIO_stdout(void);
PerlIO * Perl_PerlIO_stderr(void);
void Perl_deb_stack_all(void);
PADLIST* Perl_pad_new( int flags);
void Perl_pad_undef( CV* cv);
PADOFFSET Perl_pad_add_name( char *name, HV* typestash, HV* ourstash, char clone);
PADOFFSET Perl_pad_add_anon( SV* sv, U16 op_type);
void Perl_pad_check_dup( char* name, char is_our, HV* ourstash);
void Perl_pad_block_start( int full);
void Perl_pad_tidy( padtidy_type type);
void Perl_do_dump_pad( I32 level, PerlIO *file, PADLIST *padlist, int full);
void Perl_pad_fixup_inner_anons( PADLIST *padlist, CV *old_cv, CV *new_cv);
void Perl_pad_push( PADLIST *padlist, int depth, int has_args);
CV* Perl_find_runcv( U32 *db_seqp);
void Perl_free_tied_hv_pool(void);
void Perl_hv_clear_placeholders( HV* hb);
SV* Perl_hv_scalar( HV* hv);
SV* Perl_magic_scalarpack( HV* hv, MAGIC* mg);
void Perl_op_refcnt_lock(void);
void Perl_op_refcnt_unlock(void);
char* Perl_savesvpv( SV* sv);
void Perl_my_swabn(void* ptr, int n);
